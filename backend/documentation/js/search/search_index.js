var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AdminConversationGuard.html",[0,2.531,1,2.735]],["body/guards/AdminConversationGuard.html",[1,3.837,2,2.629,3,0.164,4,0.146,5,0.146,6,3.518,7,2.567,8,3.463,9,0.37,10,1.359,11,2.243,12,4.305,13,1.533,14,3.463,15,3.258,16,0.698,17,4.003,18,1.475,19,0.016,20,1.475,21,0.596,22,1.475,23,3.55,24,3.551,25,4.003,26,2.3,27,1.006,28,3.311,29,0.332,30,0.927,31,0.598,32,2.168,33,0.106,34,1.533,35,1.76,36,1.848,37,2.05,38,2.452,39,1.848,40,0.164,41,2.3,42,1.603,43,2.402,44,2.452,45,2.841,46,1.006,47,2.629,48,1.848,49,2.841,50,3.107,51,3.55,52,2.841,53,1.416,54,3.316,55,4.196,56,1.76,57,3.107,58,1.945,59,3.107,60,4.003,61,3.463,62,1.945,63,0.011,64,0.011]],["title/controllers/AppController.html",[65,1.352,66,2.735]],["body/controllers/AppController.html",[3,0.213,4,0.189,5,0.189,9,0.481,10,1.608,16,0.67,19,0.016,27,1.305,29,0.324,31,0.776,33,0.102,40,0.213,42,2.08,53,1.202,63,0.013,64,0.013,65,2.244,66,4.54,67,1.822,68,4.494,69,6.259,70,1.418,71,5.195,72,1.25,73,4.246,74,4.494,75,2.985,76,5.195]],["title/modules/AppModule.html",[77,1.242,78,2.735]],["body/modules/AppModule.html",[3,0.135,4,0.119,5,0.171,7,1.375,19,0.016,29,0.377,31,0.49,33,0.064,36,1.514,40,0.135,62,2.285,63,0.009,64,0.009,66,3.905,67,1.65,73,4.058,74,2.836,77,1.937,78,5.522,79,1.441,80,1.441,81,1.593,82,1.593,83,1.441,84,2.673,85,1.593,86,2.836,87,2.836,88,2.836,89,4.351,90,3.808,91,4.058,92,3.218,93,4.351,94,4.351,95,3.808,96,3.588,97,2.285,98,1.593,99,1.514,100,3.278,101,2.548,102,3.278,103,3.278,104,3.278,105,2.544,106,2.008,107,2.008,108,2.008,109,3.278,110,3.278,111,3.278,112,3.651,113,1.776,114,2.153,115,4.704,116,4.704,117,3.278,118,2.008,119,3.278,120,3.278,121,3.278,122,3.278,123,3.278,124,3.278,125,2.327,126,3.278,127,3.278,128,3.278,129,4.704,130,2.544,131,3.278,132,3.278]],["title/injectables/AppService.html",[30,0.661,73,2.36]],["body/injectables/AppService.html",[3,0.222,4,0.197,5,0.197,9,0.501,10,1.648,16,0.698,19,0.016,27,1.36,29,0.274,30,1.124,31,0.808,33,0.106,40,0.222,53,1.252,63,0.013,64,0.013,69,6.501,72,1.282,73,4.017,133,2.072,134,4.681,135,5.411,136,5.411]],["title/controllers/AuthController.html",[65,1.352,137,2.735]],["body/controllers/AuthController.html",[3,0.106,4,0.094,5,0.21,9,0.24,10,0.993,16,0.745,18,1.574,19,0.016,20,1.574,21,0.697,22,1.574,27,1.45,29,0.338,31,0.387,33,0.051,40,0.106,42,1.037,43,0.949,44,3.725,46,1.851,48,2.212,53,1.335,54,1.403,62,2.327,63,0.008,64,0.008,65,0.909,67,0.909,70,1.574,137,2.804,138,2.24,139,1.488,140,2.59,141,3.951,142,4.79,143,4.79,144,4.79,145,4.79,146,2.59,147,2.389,148,2.59,149,3.951,150,2.59,151,2.59,152,3.993,153,4.591,154,2.59,155,2.59,156,2.59,157,2.14,158,2.59,159,2.59,160,3.951,161,2.59,162,2.59,163,2.59,164,3.994,165,2.934,166,2.59,167,1.834,168,2.59,169,2.59,170,2.59,171,2.59,172,2.59,173,2.01,174,3.066,175,1.403,176,3.417,177,5.359,178,3.066,179,2.01,180,2.753,181,2.01,182,3.282,183,1.488,184,1.327,185,1.838,186,2.804,187,2.024,188,1.196,189,1.838,190,3.717,191,1.488,192,0.992,193,2.01,194,1.403,195,2.59,196,2.59,197,2.24,198,2.24,199,2.59,200,4.79,201,2.59,202,2.59,203,2.59,204,2.01,205,2.01,206,2.01,207,2.01,208,2.01,209,2.01,210,2.01,211,2.01,212,2.01,213,2.01,214,2.01,215,2.01,216,2.59,217,2.59,218,3.951,219,2.59,220,2.24,221,2.59,222,1.838,223,2.59,224,2.59,225,2.59,226,2.59,227,2.59]],["title/modules/AuthModule.html",[77,1.242,89,2.531]],["body/modules/AuthModule.html",[3,0.15,4,0.133,5,0.133,11,1.336,19,0.016,29,0.377,31,0.545,33,0.071,40,0.15,63,0.01,64,0.01,67,1.779,77,1.879,79,1.603,80,1.603,81,1.771,82,1.771,83,1.603,84,2.832,85,2.832,89,4.976,96,3.715,97,2.463,98,1.771,99,1.683,101,3.158,105,3.936,106,3.861,107,2.233,137,4.138,180,4.322,181,2.83,187,1.868,194,1.975,228,3.154,229,3.154,230,3.646,231,3.154,232,4.503,233,4.503,234,3.646,235,2.83,236,3.646,237,2.83,238,3.646,239,3.646,240,5.071,241,2.233,242,3.646,243,2.83,244,3.106,245,2.83,246,3.646,247,2.83,248,3.154,249,3.154,250,3.646,251,3.154,252,3.646,253,2.394,254,2.83,255,2.83]],["title/injectables/AuthService.html",[30,0.661,180,2.215]],["body/injectables/AuthService.html",[3,0.09,4,0.08,5,0.194,9,0.202,10,0.869,11,2.568,13,1.324,16,0.766,18,1.62,19,0.016,20,1.62,21,0.624,22,1.62,27,1.424,28,2.119,29,0.321,30,0.593,31,0.326,33,0.043,40,0.09,43,2.38,46,1.795,53,1.311,56,2.611,58,1.06,62,1.06,63,0.007,64,0.007,72,1.24,106,3.637,107,1.337,133,0.836,147,1.79,152,3.721,153,4.375,164,2.993,165,2.631,167,1.645,180,1.988,185,1.549,186,2.455,187,1.118,188,1.008,189,1.549,198,2.992,222,1.549,237,1.694,248,2.992,251,1.888,256,1.888,257,3.459,258,3.459,259,3.459,260,3.716,261,3.459,262,2.183,263,2.903,264,5.938,265,2.183,266,3.459,267,2.183,268,3.716,269,3.459,270,2.183,271,2.503,272,3.459,273,2.183,274,3.459,275,2.183,276,2.992,277,2.183,278,3.459,279,2.885,280,2.183,281,3.336,282,1.337,283,1.694,284,1.888,285,1.888,286,2.087,287,1.694,288,2.183,289,2.183,290,2.183,291,2.2,292,2.183,293,2.183,294,4.887,295,4.296,296,3.459,297,3.459,298,2.183,299,2.583,300,3.042,301,2.183,302,2.183,303,2.183,304,2.183,305,2.183,306,3.459,307,1.888,308,2.183,309,2.183,310,2.183,311,2.183,312,1.694,313,2.183,314,2.183,315,3.459,316,2.684,317,1.694,318,1.549,319,2.183,320,2.183,321,2.183]],["title/entities/Conversation.html",[7,1.616,322,1.779]],["body/entities/Conversation.html",[3,0.18,4,0.16,5,0.16,7,2.408,9,0.406,16,0.911,19,0.016,21,0.777,29,0.222,33,0.086,40,0.18,63,0.012,64,0.012,70,1.925,72,1.463,322,2.652,323,2.374,324,3.791,325,1.702,326,4.546,327,3.111,328,4.546,329,4.206,330,4.971,331,3.791,332,5.743,333,5.743,334,5.743,335,5.743,336,4.383,337,3.518,338,4.383,339,4.584,340,4.383,341,3.518,342,4.383,343,4.383,344,2.685,345,1.838,346,2.878]],["title/entities/ConversationMember.html",[322,1.779,347,2.36]],["body/entities/ConversationMember.html",[3,0.179,4,0.159,5,0.159,9,0.404,16,0.876,19,0.016,21,0.777,29,0.29,33,0.086,35,3.1,38,4.581,40,0.179,63,0.012,64,0.012,70,1.853,72,1.414,299,2.682,322,2.646,323,2.367,325,1.699,327,3.107,337,3.51,339,4.431,344,2.677,345,1.833,347,3.51,348,5.471,349,3.391,350,6.395,351,4.37,352,4.37,353,3.101,354,4.818,355,4.37,356,4.37,357,3.78,358,4.37]],["title/classes/ConversationMemberDto.html",[33,0.075,359,2.531]],["body/classes/ConversationMemberDto.html",[3,0.209,4,0.185,5,0.185,9,0.47,16,0.815,19,0.016,21,0.695,29,0.257,32,3.999,33,0.124,34,1.946,35,3.019,40,0.209,63,0.013,64,0.013,70,1.723,72,1.404,299,2.879,325,1.871,327,3.335,359,4.145,360,1.946,361,5.939,362,3.608,363,5.084,364,5.084]],["title/controllers/ConversationMembersController.html",[65,1.352,365,2.735]],["body/controllers/ConversationMembersController.html",[1,1.951,3,0.113,4,0.1,5,0.1,6,3.175,7,2.484,9,0.254,10,1.039,13,1.053,15,2.293,16,0.764,18,1.616,19,0.016,20,1.616,21,0.652,22,1.616,27,1.488,29,0.35,31,0.411,33,0.054,35,2.736,36,2.873,37,1.408,40,0.113,46,1.622,48,2.293,53,1.37,58,2.008,63,0.008,64,0.008,65,0.964,67,0.964,70,1.616,75,1.58,139,1.58,147,2.365,157,3.857,167,1.583,175,1.489,184,1.408,188,1.269,191,1.58,192,1.053,282,1.684,286,1.335,291,2.117,359,4.852,365,2.933,366,2.134,367,4.297,368,3.575,369,3.575,370,3.575,371,3.575,372,4.297,373,2.378,374,4.133,375,2.749,376,2.378,377,2.749,378,5.524,379,2.749,380,2.749,381,2.378,382,2.749,383,2.749,384,2.378,385,5.524,386,4.297,387,2.749,388,2.749,389,2.749,390,4.133,391,2.749,392,2.749,393,2.378,394,1.684,395,2.532,396,2.749,397,1.805,398,3.525,399,1.951,400,1.408,401,1.951,402,3.855,403,2.378,404,1.805,405,1.951,406,4.297,407,2.749,408,2.749,409,2.749,410,2.378,411,2.749,412,2.749,413,4.133,414,2.749,415,2.749,416,4.133,417,3.208,418,4.133,419,1.805,420,2.749,421,2.749,422,2.749,423,2.749,424,2.749]],["title/modules/ConversationMembersModule.html",[77,1.242,90,2.215]],["body/modules/ConversationMembersModule.html",[3,0.164,4,0.146,5,0.146,7,2.267,15,3.527,19,0.016,29,0.376,31,0.598,33,0.078,35,1.76,36,1.848,37,2.05,40,0.164,63,0.011,64,0.011,67,1.897,77,1.972,79,1.76,80,1.76,81,1.945,82,1.945,83,1.76,84,2.974,85,2.974,90,4.357,91,3.311,92,3.427,95,4.055,96,2.168,97,2.626,98,1.945,99,1.848,101,2.928,108,2.452,235,3.107,347,2.452,365,4.345,425,3.463,426,3.463,427,4.003,428,3.463,429,3.463,430,3.837,431,3.463,432,2.452,433,1.76,434,3.463,435,3.107,436,4.003,437,3.463,438,4.003]],["title/injectables/ConversationMembersService.html",[15,1.779,30,0.661]],["body/injectables/ConversationMembersService.html",[3,0.083,4,0.074,5,0.074,7,0.851,9,0.188,10,0.82,11,2.657,13,1.249,15,1.506,16,0.82,18,1.734,19,0.016,20,1.734,21,0.7,22,1.734,27,1.556,29,0.303,30,0.559,31,0.303,33,0.04,35,2.855,36,2.998,38,4.116,39,0.936,40,0.083,43,1.195,46,0.51,53,1.432,55,2.531,56,2.908,61,4.054,63,0.007,64,0.007,72,1.348,133,0.776,147,0.743,157,2.971,167,1.566,188,0.936,253,1.332,271,2.954,282,1.998,286,1.584,291,2.096,299,2.774,327,3.449,345,0.851,347,2.871,359,4.699,368,2.821,369,2.821,370,2.821,371,2.821,372,2.821,373,2.821,381,2.821,384,2.821,398,2.903,403,1.754,404,1.332,417,5.039,430,1.439,433,0.892,434,1.754,435,1.574,439,1.574,440,4.091,441,3.262,442,3.262,443,2.028,444,2.694,445,2.913,446,2.028,447,3.262,448,2.028,449,2.028,450,2.028,451,3.262,452,2.028,453,3.262,454,2.028,455,2.028,456,3.262,457,2.028,458,3.262,459,2.028,460,2.028,461,3.262,462,2.028,463,1.574,464,1.574,465,2.315,466,1.332,467,2.028,468,1.754,469,2.028,470,2.028,471,5.721,472,2.028,473,3.262,474,3.262,475,4.054,476,4.091,477,2.028,478,3.262,479,2.028,480,2.028,481,4.687,482,3.262]],["title/controllers/ConversationsController.html",[65,1.352,483,2.735]],["body/controllers/ConversationsController.html",[3,0.128,4,0.114,5,0.227,6,1.794,7,2.244,9,0.289,10,1.141,16,0.691,18,1.46,19,0.016,20,1.46,21,0.647,22,1.46,27,1.345,29,0.366,31,0.466,33,0.061,40,0.128,42,1.25,46,1.569,48,2.713,53,1.238,54,1.69,63,0.009,64,0.009,65,1.095,67,1.095,70,1.46,75,1.794,139,1.794,147,2.463,157,3.865,165,3.278,167,1.195,173,2.422,174,3.523,175,2.459,178,3.523,179,2.422,183,1.794,184,1.599,187,1.599,188,1.441,190,3.523,191,1.794,192,1.195,193,2.422,194,1.69,204,2.422,205,2.422,206,2.422,207,2.422,208,2.422,209,2.422,210,2.422,211,2.422,212,2.422,213,2.422,214,2.422,215,2.422,393,2.7,394,2.781,395,3.278,397,2.049,398,2.215,410,2.7,419,3.514,445,2.599,483,3.222,484,2.7,485,3.121,486,4.54,487,3.927,488,3.121,489,4.278,490,3.121,491,3.121,492,2.7,493,3.858,494,3.121,495,2.7,496,3.858,497,2.7,498,3.121,499,3.121,500,1.143,501,3.121,502,2.7,503,1.599,504,4.629,505,1.794,506,2.7,507,3.121,508,3.121,509,3.121,510,3.121,511,3.121,512,3.121,513,2.7,514,3.121]],["title/modules/ConversationsModule.html",[77,1.242,91,2.36]],["body/modules/ConversationsModule.html",[3,0.161,4,0.143,5,0.143,7,1.646,19,0.016,29,0.379,31,0.587,33,0.077,35,1.726,36,1.813,40,0.161,63,0.011,64,0.011,67,1.872,77,1.953,79,1.726,80,1.726,81,1.907,82,1.907,83,1.726,84,2.944,85,2.944,90,3.066,91,4.628,92,3.408,95,4.032,97,2.592,98,1.907,99,1.813,101,2.89,108,2.405,112,3.047,187,2.011,194,2.126,243,3.047,244,3.268,245,3.047,254,3.047,255,3.047,430,3.787,432,2.405,433,1.726,437,3.396,445,3.699,483,4.302,515,3.396,516,3.396,517,3.396,518,3.926,519,3.926,520,3.926,521,3.926,522,3.396,523,3.926]],["title/injectables/ConversationsService.html",[30,0.661,445,1.872]],["body/injectables/ConversationsService.html",[3,0.091,4,0.08,5,0.195,7,2.733,9,0.204,10,0.877,11,2.477,13,1.336,15,2.855,16,0.691,18,1.461,19,0.016,20,1.461,21,0.59,22,1.461,27,1.236,29,0.342,30,0.598,31,0.33,33,0.043,35,0.97,36,1.019,37,1.13,38,1.351,39,1.019,40,0.091,43,2.184,46,1.087,53,1.239,56,2.973,57,1.712,58,3.003,63,0.007,64,0.007,72,0.846,133,0.845,147,2.184,157,3.447,165,2.65,167,2.283,188,1.019,253,1.449,271,2.518,282,3.011,286,2.102,291,2.916,299,1.463,312,1.712,317,1.712,318,2.476,326,3.489,327,3.003,328,1.566,329,1.449,330,1.712,341,1.351,345,0.925,400,2.216,401,1.566,402,3.358,417,3.816,419,2.291,430,1.566,433,0.97,444,2.826,445,1.695,464,3.358,465,1.566,466,1.449,468,1.909,471,5.158,475,1.909,487,3.017,489,3.229,492,3.017,493,3.229,495,3.017,496,3.229,503,1.13,504,3.742,505,1.268,506,1.909,522,1.909,524,1.909,525,1.787,526,3.488,527,2.206,528,3.23,529,2.206,530,3.488,531,2.707,532,2.206,533,3.488,534,2.206,535,2.206,536,2.206,537,1.449,538,1.909,539,2.707,540,2.206,541,2.206,542,2.206,543,2.206,544,1.909,545,2.206,546,2.206,547,1.909,548,1.712,549,3.488,550,2.206,551,4.326,552,2.206,553,2.206,554,3.488,555,2.206,556,2.206,557,2.206,558,2.206,559,2.206,560,3.488,561,2.206,562,1.909,563,1.909,564,1.909,565,1.909,566,1.909,567,1.909]],["title/classes/CreateConversationDto.html",[33,0.075,489,2.531]],["body/classes/CreateConversationDto.html",[3,0.202,4,0.179,5,0.179,9,0.456,16,0.799,19,0.016,21,0.682,29,0.313,32,3.353,33,0.121,34,1.886,40,0.202,63,0.012,64,0.012,70,1.689,72,1.388,192,1.886,299,2.839,325,1.835,328,4.804,360,1.886,489,4.065,568,5.855,569,3.496,570,4.927,571,6.19,572,4.261,573,4.927,574,4.927,575,4.065,576,3.666,577,3.235]],["title/classes/CreateGroupMemberDto.html",[33,0.075,578,2.36]],["body/classes/CreateGroupMemberDto.html",[3,0.242,4,0.215,5,0.215,19,0.015,33,0.116,40,0.242,63,0.014,64,0.014,113,3.197,360,2.26,362,4.189,578,4.231,579,3.392,580,5.105]],["title/classes/CreateMessageDto.html",[33,0.075,581,2.36]],["body/classes/CreateMessageDto.html",[3,0.199,4,0.176,5,0.176,9,0.448,16,0.79,19,0.016,21,0.675,29,0.245,32,3.317,33,0.12,34,1.854,40,0.199,63,0.012,64,0.012,70,1.671,72,1.379,325,1.815,327,3.536,360,1.854,500,2.766,576,3.637,581,3.751,582,5.809,583,3.759,584,6.124,585,4.843,586,4.843,587,4.766,588,4.843,589,3.859]],["title/classes/CreateRelationshipDto.html",[33,0.075,590,2.36]],["body/classes/CreateRelationshipDto.html",[3,0.211,4,0.187,5,0.187,9,0.476,16,0.663,19,0.016,21,0.566,29,0.26,32,3.442,33,0.124,34,1.967,40,0.211,46,1.597,63,0.013,64,0.013,70,1.402,72,1.242,325,1.884,360,1.967,500,1.883,576,3.442,587,3.647,589,3.652,590,3.892,591,5.497,592,3.988,593,5.354,594,3.647,595,4.932,596,5.497,597,5.139,598,5.139]],["title/guards/CreatorConversationGuard.html",[0,2.531,405,2.735]],["body/guards/CreatorConversationGuard.html",[2,2.712,3,0.17,4,0.15,5,0.15,6,3.574,7,2.608,9,0.382,10,1.387,11,2.278,12,4.36,13,1.581,16,0.713,18,1.507,19,0.016,20,1.507,21,0.608,22,1.507,23,3.625,24,3.596,26,2.374,27,1.038,28,3.382,29,0.315,30,0.946,31,0.617,32,2.237,33,0.108,34,1.581,40,0.17,41,2.374,42,1.654,43,2.432,44,2.53,45,2.931,46,1.038,47,2.712,48,1.907,49,2.931,50,3.205,51,3.625,52,2.931,53,1.277,54,2.99,56,1.816,58,2.006,59,3.205,62,2.006,63,0.011,64,0.011,405,3.918,406,3.573,445,3.459,463,3.205,599,3.573,600,4.13,601,4.13,602,4.13,603,4.13,604,4.13]],["title/modules/DatabaseModule.html",[77,1.242,92,1.872]],["body/modules/DatabaseModule.html",[3,0.181,4,0.161,5,0.161,11,1.616,19,0.016,21,0.486,29,0.345,31,0.659,33,0.086,40,0.181,63,0.012,64,0.012,77,2.07,79,1.939,80,1.939,81,2.142,82,2.142,83,1.939,84,2.801,85,3.121,92,3.434,97,2.801,98,2.142,99,2.036,101,3.123,105,4.475,106,4.173,107,2.701,247,3.423,253,2.896,279,2.389,300,2.259,323,2.389,432,2.701,433,1.939,605,3.815,606,3.815,607,5.628,608,4.41,609,4.986,610,4.41,611,4.41,612,3.815,613,3.815,614,3.815,615,3.815,616,3.815,617,3.815,618,3.815,619,3.815,620,3.815,621,3.815,622,3.815,623,3.815,624,3.815]],["title/classes/DeleteConversationDto.html",[33,0.075,493,2.531]],["body/classes/DeleteConversationDto.html",[3,0.216,4,0.192,5,0.192,9,0.488,16,0.68,19,0.016,21,0.581,29,0.327,33,0.126,34,2.018,40,0.216,63,0.013,64,0.013,70,1.438,72,1.262,192,2.018,325,1.913,327,3.39,360,2.018,493,4.239,569,3.741,572,4.56,575,3.461,576,3.496,589,3.71,625,5.584,626,4.56]],["title/guards/FriendRelationshipGuard.html",[0,2.531,399,2.735]],["body/guards/FriendRelationshipGuard.html",[2,2.636,3,0.165,4,0.146,5,0.146,6,3.523,9,0.371,10,1.361,11,2.246,12,4.31,13,1.537,16,0.699,18,1.478,19,0.016,20,1.478,21,0.597,22,1.478,23,3.557,24,3.555,26,2.307,27,1.009,28,3.318,29,0.332,30,0.929,31,0.6,32,2.174,33,0.106,34,1.537,39,1.854,40,0.165,41,2.307,42,1.608,43,2.404,44,2.459,45,2.849,46,1.009,47,2.636,48,2.501,49,2.849,51,3.557,52,2.849,53,1.418,54,3.32,56,1.765,58,1.95,62,1.95,63,0.011,64,0.011,399,3.844,400,3.51,528,3.825,537,2.636,538,3.472,544,3.472,547,3.472,548,3.115,627,3.472,628,4.014,629,4.014,630,4.014,631,4.014,632,4.014]],["title/classes/GroupMember.html",[33,0.075,633,2.735]],["body/classes/GroupMember.html",[3,0.181,4,0.161,5,0.161,9,0.408,16,0.879,19,0.016,21,0.779,29,0.292,33,0.086,38,4.59,39,2.036,40,0.181,63,0.012,64,0.012,70,1.859,72,1.418,299,2.694,325,1.709,337,3.532,339,4.442,344,2.701,345,1.849,349,3.423,353,3.13,354,4.835,360,1.688,579,4.063,633,4.092,634,6.116,635,6.424,636,6.424,637,4.41,638,4.41,639,4.41,640,4.41]],["title/controllers/GroupMembersController.html",[65,1.352,641,2.735]],["body/controllers/GroupMembersController.html",[3,0.137,4,0.121,5,0.121,9,0.308,10,1.194,16,0.826,18,1.651,19,0.016,20,1.651,21,0.666,22,1.651,27,1.608,29,0.324,31,0.497,33,0.065,37,1.703,40,0.137,42,1.331,48,2.194,53,1.481,63,0.01,64,0.01,65,1.166,67,1.166,70,1.746,72,1.394,75,1.91,113,3.277,114,4.371,139,1.91,175,3.003,191,1.91,192,1.273,366,2.58,367,4.796,376,2.875,394,2.036,395,2.036,404,3.12,419,3.641,503,1.703,505,1.91,525,2.434,578,4.077,579,3.825,595,5.166,641,3.372,642,5.233,643,4.11,644,4.11,645,2.875,646,3.324,647,3.324,648,2.875,649,4.751,650,2.875,651,4.751,652,3.324,653,2.875,654,4.601,655,4.751,656,3.324,657,2.359,658,3.396,659,3.324,660,3.324,661,3.324,662,3.324,663,3.324,664,3.324,665,3.324,666,3.324,667,3.324,668,3.324,669,3.324]],["title/modules/GroupMembersModule.html",[77,1.242,93,2.531]],["body/modules/GroupMembersModule.html",[3,0.203,4,0.18,5,0.18,19,0.016,29,0.343,31,0.739,33,0.097,37,2.532,40,0.203,63,0.012,64,0.012,67,2.176,77,2.184,79,2.174,80,2.174,81,2.401,82,2.401,83,2.174,84,3.293,85,2.401,93,4.907,97,3.014,98,2.401,99,2.283,113,3.36,114,3.246,429,4.276,431,4.276,579,2.841,641,4.811,658,4.577,670,4.276,671,4.276]],["title/injectables/GroupMembersService.html",[30,0.661,658,2.36]],["body/injectables/GroupMembersService.html",[3,0.148,4,0.131,5,0.131,9,0.334,10,1.265,16,0.852,18,1.712,19,0.016,20,1.712,21,0.691,22,1.712,27,1.763,29,0.293,30,0.863,31,0.539,33,0.071,40,0.148,53,1.527,63,0.01,64,0.01,72,1.29,113,2.727,114,4.489,133,1.382,167,1.382,404,3.306,419,3.306,439,2.801,503,1.849,505,2.074,525,2.579,578,4.043,579,3.929,595,5.306,633,4.453,642,5.428,643,4.356,644,4.356,645,4.356,648,4.356,650,4.356,653,4.356,654,4.607,658,3.084,672,3.609,673,3.609,674,4.453,675,3.609,676,3.609,677,3.609,678,6.6,679,3.609,680,3.609,681,3.122,682,3.609]],["title/interfaces/IUser.html",[147,1.412,683,2.36]],["body/interfaces/IUser.html",[3,0.217,4,0.193,5,0.193,9,0.49,19,0.015,21,0.77,40,0.217,63,0.013,64,0.013,72,1.53,147,2.37,281,3.944,299,3.054,300,3.73,325,1.918,683,3.241,684,4.106,685,4.577]],["title/injectables/JwtAuthGuard.html",[30,0.661,686,2.991]],["body/injectables/JwtAuthGuard.html",[3,0.262,4,0.136,5,0.136,9,0.346,10,1.297,12,3.39,13,1.432,16,0.763,18,1.613,19,0.016,20,1.613,21,0.569,22,1.613,23,3.39,24,3.452,26,2.15,27,1.297,29,0.322,30,0.885,31,0.559,33,0.073,40,0.154,42,1.498,43,1.371,46,1.68,53,1.368,62,1.817,63,0.01,64,0.01,118,2.292,133,1.432,167,1.432,182,2.292,184,1.916,241,2.292,283,2.904,291,1.916,316,2.904,686,4.007,687,5.513,688,2.904,689,2.967,690,5.163,691,5.163,692,3.236,693,5.365,694,3.741,695,3.741,696,5.163,697,3.741,698,5.911,699,2.655,700,3.236,701,2.904,702,3.236,703,2.904,704,4.466,705,4.466,706,3.236,707,3.741,708,2.655,709,2.655,710,2.904,711,3.741,712,3.741,713,3.741,714,3.741,715,2.904,716,3.741,717,3.741,718,2.904,719,4.466,720,3.741,721,2.904,722,3.741,723,3.741,724,3.741]],["title/injectables/JwtStrategy.html",[30,0.661,232,2.531]],["body/injectables/JwtStrategy.html",[3,0.148,4,0.131,5,0.131,9,0.333,10,1.263,11,2.122,13,1.924,16,0.649,18,1.372,19,0.016,20,1.372,21,0.554,22,1.372,27,0.905,29,0.346,30,0.862,31,0.538,33,0.071,40,0.148,43,1.319,53,0.833,54,1.95,63,0.01,64,0.01,106,4.184,107,2.205,133,1.378,147,2.296,188,1.662,220,3.114,232,3.803,241,2.205,249,3.114,263,3.591,268,5.01,271,1.844,281,2.722,284,3.114,286,2.442,287,3.901,299,2.108,300,2.575,689,2.889,703,3.901,708,4.11,709,4.11,710,3.901,715,2.794,718,2.794,725,3.114,726,4.348,727,3.6,728,3.6,729,5.026,730,3.6,731,3.6,732,3.114,733,2.794,734,3.114,735,4.495,736,3.6,737,5.01,738,5.791,739,3.6,740,3.6,741,3.6,742,3.6,743,3.6,744,3.6,745,3.114,746,3.6,747,3.6,748,3.114,749,3.114,750,3.6,751,3.6,752,3.6,753,3.6,754,3.6,755,3.6,756,3.6,757,3.6,758,3.6]],["title/injectables/LocalAuthGuard.html",[30,0.661,759,2.991]],["body/injectables/LocalAuthGuard.html",[3,0.221,4,0.196,5,0.196,19,0.016,29,0.33,30,1.119,31,0.802,33,0.105,40,0.221,63,0.013,64,0.013,118,3.289,133,2.056,241,3.289,688,4.168,689,3.752,700,4.645,702,4.645,703,4.168,704,4.645,705,4.645,706,4.645,708,3.811,709,3.811,759,5.067,760,4.645,761,6.529,762,4.168]],["title/injectables/LocalStrategy.html",[30,0.661,233,2.531]],["body/injectables/LocalStrategy.html",[3,0.167,4,0.148,5,0.148,9,0.376,10,1.372,11,2.259,13,1.554,16,0.704,18,1.489,19,0.016,20,1.489,21,0.601,22,1.489,27,1.02,28,3.343,29,0.348,30,0.936,31,0.606,33,0.08,40,0.167,42,1.626,43,1.487,46,1.657,53,0.939,56,1.785,63,0.011,64,0.011,72,1.385,130,3.151,133,1.554,167,1.554,180,4.071,181,3.151,233,3.584,241,2.487,279,3.726,281,2.956,283,3.151,285,3.512,287,4.236,291,2.08,316,3.151,689,3.137,708,2.881,709,3.873,718,3.151,726,4.721,732,3.512,733,3.151,734,3.512,737,3.512,762,4.236,763,3.512,764,4.06,765,4.06,766,5.458,767,4.06,768,4.06,769,4.06,770,4.06,771,4.06,772,4.06,773,4.06]],["title/classes/LoginUserDto.html",[33,0.075,152,2.531]],["body/classes/LoginUserDto.html",[3,0.146,4,0.13,5,0.13,9,0.329,16,0.643,19,0.016,21,0.75,29,0.252,33,0.098,34,1.361,40,0.146,63,0.01,64,0.01,70,1.36,72,1.33,118,4.367,125,5.209,130,3.867,152,3.272,189,4.083,192,1.361,279,3.784,281,4.019,325,1.477,360,1.361,500,2.689,575,3.777,576,3.116,577,3.272,589,3.306,594,3.536,715,3.867,745,4.31,748,4.31,749,3.075,774,2.523,775,3.555,776,3.555,777,4.983,778,4.983,779,3.583,780,3.555,781,5.885,782,5.885,783,3.555,784,4.31,785,6.234,786,3.555,787,4.983,788,4.983,789,3.555,790,4.31,791,3.555,792,3.867,793,2.523,794,2.523,795,3.867,796,2.759,797,2.759]],["title/guards/MemberConversationGuard.html",[0,2.531,397,2.531]],["body/guards/MemberConversationGuard.html",[2,2.585,3,0.162,4,0.143,5,0.143,6,3.488,7,2.546,9,0.364,10,1.343,11,2.224,12,4.275,13,2.047,14,3.405,15,3.242,16,0.69,18,1.459,19,0.016,20,1.459,21,0.589,22,1.459,23,3.51,24,3.526,26,2.262,27,0.989,28,3.274,29,0.329,30,0.916,31,0.588,32,2.132,33,0.105,34,1.507,35,1.731,36,1.818,37,2.017,40,0.162,41,2.262,43,2.385,44,2.411,45,2.794,46,0.989,47,2.585,48,1.818,49,2.794,50,3.055,51,3.51,52,2.794,53,1.237,54,2.895,55,4.149,56,2.351,57,3.055,58,1.912,59,3.055,62,1.912,63,0.011,64,0.011,286,2.597,397,3.51,445,3.489,463,3.055,798,3.405,799,3.937,800,3.937,801,3.937]],["title/entities/Message.html",[322,1.779,500,1.412]],["body/entities/Message.html",[3,0.186,4,0.165,5,0.165,9,0.418,16,0.92,19,0.016,21,0.785,29,0.229,33,0.089,40,0.186,63,0.012,64,0.012,70,1.945,72,1.472,322,2.088,323,2.449,325,1.737,327,3.159,329,4.27,330,5.046,337,3.59,339,4.663,341,3.59,344,2.77,345,1.896,500,2.611,802,3.911,803,6.502,804,4.522,805,4.522,806,4.522,807,4.522,808,4.522,809,4.522]],["title/controllers/MessagesController.html",[65,1.352,810,2.735]],["body/controllers/MessagesController.html",[3,0.176,4,0.156,5,0.156,9,0.397,10,1.423,11,2.322,16,0.554,18,1.171,19,0.016,20,1.171,21,0.473,22,1.171,27,1.078,29,0.364,31,0.641,33,0.084,40,0.176,42,1.719,46,1.694,48,2.615,53,0.993,56,1.887,63,0.011,64,0.011,65,1.505,67,1.505,70,1.171,75,2.466,139,2.466,147,2.469,175,3.067,183,2.466,184,2.198,188,1.981,191,2.466,192,1.643,271,2.198,394,2.628,395,2.628,500,2.075,503,2.198,525,3.247,531,3.33,581,4.563,657,3.045,810,4.019,811,3.712,812,4.291,813,4.291,814,4.291,815,3.883,816,3.712,817,3.33,818,4.291,819,4.291,820,3.712,821,4.291]],["title/modules/MessagesModule.html",[77,1.242,94,2.531]],["body/modules/MessagesModule.html",[3,0.166,4,0.147,5,0.147,15,1.869,19,0.016,29,0.384,31,0.605,33,0.079,35,2.707,36,2.515,37,2.074,40,0.166,63,0.011,64,0.011,67,1.911,77,1.984,79,1.78,80,1.78,81,1.967,82,1.967,83,1.78,84,2.991,85,1.967,90,4.068,92,3.439,94,4.944,97,2.646,98,1.967,99,1.869,101,2.951,108,2.48,112,3.142,345,1.698,347,2.48,348,3.142,432,2.48,433,1.78,435,3.142,444,2.327,445,1.967,500,1.483,502,3.502,810,4.369,815,4.336,816,3.502,822,3.502,823,4.048,824,3.502,825,4.048,826,3.502,827,4.048,828,4.048]],["title/injectables/MessagesService.html",[30,0.661,815,2.36]],["body/injectables/MessagesService.html",[3,0.16,4,0.142,5,0.142,9,0.361,10,1.336,11,2.214,13,2.035,15,2.996,16,0.686,18,1.451,19,0.016,20,1.451,21,0.586,22,1.451,27,0.981,29,0.363,30,0.911,31,0.583,33,0.076,35,1.717,36,1.803,37,2,40,0.16,43,1.947,46,0.981,53,0.903,56,1.717,58,1.897,63,0.011,64,0.011,133,1.495,147,2.377,167,2.035,188,1.803,271,2,286,2.582,291,2,299,2.229,327,2.936,341,2.392,345,1.637,433,1.717,444,3.729,464,4.126,466,2.564,500,2.214,503,2,525,2.723,531,4.126,581,4.467,815,3.256,817,3.03,826,3.378,829,3.378,830,3.905,831,6.044,832,3.905,833,5.316,834,3.905,835,3.905,836,3.905,837,3.905,838,3.378]],["title/injectables/MulterConfigService.html",[30,0.661,244,2.36]],["body/injectables/MulterConfigService.html",[3,0.137,4,0.121,5,0.22,9,0.308,10,1.194,16,0.716,18,0.907,19,0.016,20,1.513,21,0.366,22,0.907,27,1.194,29,0.324,30,0.814,31,0.497,33,0.065,40,0.137,41,1.91,43,1.218,53,1.283,62,1.615,63,0.01,64,0.01,72,1.084,133,1.273,176,4.11,187,1.703,194,1.8,244,2.91,318,4.542,325,1.408,346,3.641,386,2.875,525,1.703,539,3.687,839,2.875,840,5.545,841,6.05,842,4.751,843,3.324,844,5.545,845,4.751,846,3.324,847,3.324,848,3.324,849,2.359,850,3.324,851,4.751,852,4.751,853,3.324,854,4.751,855,3.324,856,3.324,857,3.324,858,3.324,859,3.324,860,3.324,861,4.11,862,4.11,863,3.324,864,3.324,865,4.751,866,3.324,867,3.324,868,3.324,869,3.324,870,3.324,871,5.545,872,3.324,873,3.324,874,3.324,875,3.324,876,3.324,877,3.324,878,3.324,879,3.324,880,3.324,881,3.324,882,3.324,883,3.324,884,4.751,885,3.324,886,3.324,887,3.324,888,4.751,889,3.324,890,3.324,891,3.324,892,2.875,893,4.751,894,4.751,895,3.324,896,3.324,897,3.324,898,4.751,899,3.324,900,4.751,901,3.324]],["title/classes/RegisterUserDto.html",[33,0.075,164,2.36]],["body/classes/RegisterUserDto.html",[3,0.117,4,0.104,5,0.104,9,0.264,16,0.867,19,0.016,21,0.74,29,0.257,33,0.083,34,1.092,39,1.317,40,0.117,63,0.009,64,0.009,70,1.833,72,1.365,118,3.864,125,4.477,164,2.603,185,4.87,192,1.092,279,3.259,281,3.539,300,3.082,325,1.26,360,1.092,500,1.861,575,4.507,576,3.048,577,4.41,589,3.234,594,2.025,674,2.603,735,3.298,774,2.025,779,4.324,781,3.676,782,3.676,790,3.676,792,3.298,793,2.025,794,2.025,795,3.942,796,2.214,797,2.214,902,3.994,903,3.994,904,3.994,905,3.604,906,4.868,907,3.676,908,3.676,909,3.676,910,3.676,911,2.468,912,2.853,913,3.676,914,2.468,915,2.853,916,3.676,917,3.676,918,2.468,919,2.853,920,2.853,921,4.25,922,4.25,923,2.853,924,3.604,925,3.298,926,2.468,927,2.853,928,2.853,929,2.853,930,3.335,931,2.468,932,2.853,933,3.676,934,3.676,935,2.468,936,3.676,937,3.676,938,3.676,939,2.468,940,4.896,941,2.853,942,2.468,943,2.025]],["title/entities/Relationship.html",[322,1.779,400,1.974]],["body/entities/Relationship.html",[3,0.186,4,0.165,5,0.165,9,0.418,16,0.888,19,0.016,21,0.785,29,0.296,33,0.089,39,2.088,40,0.186,63,0.012,64,0.012,70,1.877,72,1.427,322,2.706,323,2.449,325,1.737,337,3.59,339,4.472,344,2.77,345,1.896,353,3.209,354,4.882,400,3.65,537,4.68,593,5.046,944,3.911,945,6.502,946,5.624,947,4.522,948,4.522,949,4.522,950,4.522]],["title/controllers/RelationshipsController.html",[65,1.352,951,2.735]],["body/controllers/RelationshipsController.html",[3,0.154,4,0.137,5,0.137,9,0.348,10,1.302,16,0.669,18,1.414,19,0.016,20,1.414,21,0.704,22,1.414,27,1.302,29,0.359,31,0.562,33,0.074,40,0.154,42,1.506,46,1.884,48,1.737,53,1.199,63,0.01,64,0.01,65,1.319,67,1.319,70,1.414,75,2.161,139,2.161,147,2.599,157,3.459,175,2.037,183,2.161,184,1.926,188,1.737,190,4.6,191,2.161,192,1.44,394,2.304,395,2.304,400,2.654,503,1.926,505,2.161,528,3.21,590,4.593,657,2.669,820,4.482,951,3.677,952,3.253,953,3.761,954,3.677,955,4.482,956,3.253,957,3.761,958,5.181,959,3.761,960,3.253,961,3.761,962,3.761,963,3.253,964,4.021,965,2.669,966,3.761,967,3.761,968,3.761,969,3.761,970,3.761,971,3.761,972,3.761,973,3.761]],["title/modules/RelationshipsModule.html",[77,1.242,95,2.215]],["body/modules/RelationshipsModule.html",[3,0.174,4,0.154,5,0.154,19,0.016,29,0.37,31,0.632,33,0.083,40,0.174,63,0.011,64,0.011,67,1.967,77,2.027,79,1.859,80,1.859,81,2.054,82,2.054,83,1.859,84,3.057,85,3.057,92,3.482,95,4.397,96,3.882,97,2.724,98,2.054,99,1.952,101,3.037,108,2.59,235,3.281,400,2.166,432,2.59,433,1.859,528,4.172,951,4.466,963,3.657,974,3.657,975,3.657,976,3.657,977,4.228,978,4.228,979,4.228,980,3.657,981,4.228]],["title/injectables/RelationshipsService.html",[30,0.661,528,2.087]],["body/injectables/RelationshipsService.html",[3,0.096,4,0.085,5,0.085,9,0.217,10,0.919,11,2.14,13,1.4,16,0.656,18,1.387,19,0.016,20,1.387,21,0.56,22,1.387,27,1.13,29,0.336,30,0.627,31,0.35,33,0.046,39,1.082,40,0.096,43,2.43,46,1.533,53,1.275,56,3.019,58,1.777,63,0.007,64,0.007,72,1.142,133,0.897,147,2.235,157,2.753,167,1.946,188,1.082,263,3.125,271,1.874,282,2.755,286,1.777,291,2.603,345,0.983,357,2.027,400,3.125,401,2.596,433,1.031,444,2.921,465,3.193,466,1.539,500,1.34,503,1.201,528,1.981,537,1.539,548,3.945,590,3.737,593,5.921,946,6.558,954,3.193,955,3.891,956,3.164,960,3.164,964,1.819,980,2.027,982,2.027,983,3.658,984,2.344,985,2.344,986,3.658,987,3.658,988,2.344,989,2.344,990,2.344,991,2.027,992,2.344,993,2.344,994,2.344,995,2.344,996,5.083,997,3.658,998,5.083,999,5.083,1000,4.498,1001,3.658,1002,5.083,1003,3.658,1004,2.344,1005,2.027,1006,3.658,1007,2.344,1008,2.344,1009,2.344]],["title/interfaces/Response.html",[153,2.36,683,2.36]],["body/interfaces/Response.html",[3,0.18,4,0.16,5,0.16,9,0.406,19,0.016,21,0.633,24,3.11,26,2.519,29,0.357,30,0.984,31,0.655,33,0.086,40,0.236,41,2.519,42,1.755,53,1.014,63,0.012,64,0.012,72,0.857,153,3.518,184,2.245,325,1.702,500,2.104,674,3.923,683,2.685,684,3.402,693,4.971,699,3.111,721,3.402,1010,3.402,1011,5.619,1012,6.104,1013,4.968,1014,4.968,1015,4.968,1016,3.402,1017,3.791,1018,3.791,1019,3.111,1020,3.111,1021,3.791,1022,3.791,1023,3.791,1024,3.791,1025,3.791,1026,3.791]],["title/injectables/TransformInterceptor.html",[30,0.661,1020,2.735]],["body/injectables/TransformInterceptor.html",[3,0.17,4,0.15,5,0.15,9,0.382,10,1.387,13,1.581,16,0.713,18,1.507,19,0.016,20,1.507,21,0.608,22,1.507,24,3.596,26,3.173,27,1.038,29,0.35,30,0.946,31,0.617,33,0.081,40,0.227,41,2.374,42,1.654,53,0.955,63,0.011,64,0.011,72,0.807,133,1.581,153,2.53,184,2.116,500,2.023,674,2.53,683,2.53,692,3.573,693,5.526,699,2.931,721,3.205,1010,3.205,1011,4.827,1012,4.776,1013,4.776,1014,5.743,1015,5.38,1016,3.205,1017,3.573,1018,3.573,1019,2.931,1020,3.918,1021,5.38,1022,5.38,1023,3.573,1024,3.573,1025,3.573,1026,3.573,1027,4.13,1028,4.13,1029,4.13]],["title/classes/UpdateConversationDto.html",[33,0.075,496,2.531]],["body/classes/UpdateConversationDto.html",[3,0.208,4,0.185,5,0.185,9,0.469,16,0.813,19,0.016,21,0.694,29,0.256,33,0.123,34,1.94,40,0.208,63,0.013,64,0.013,70,1.719,72,1.402,325,1.867,327,3.33,328,4.865,360,1.94,496,4.136,569,3.595,576,3.713,589,3.62,626,4.382,940,4.889,1030,5.93,1031,5.066,1032,5.066,1033,5.066]],["title/classes/UpdateGroupMemberDto.html",[33,0.075,654,2.531]],["body/classes/UpdateGroupMemberDto.html",[3,0.227,4,0.202,5,0.202,19,0.016,29,0.336,33,0.108,40,0.227,63,0.013,64,0.013,113,3.602,192,2.12,360,2.12,362,3.929,404,3.636,525,2.836,578,3.391,579,3.182,654,4.367,689,3.822,1034,4.789,1035,6.65,1036,4.297]],["title/classes/UpdateMessgageDto.html",[33,0.075,1037,2.991]],["body/classes/UpdateMessgageDto.html",[3,0.23,4,0.204,5,0.204,19,0.016,29,0.339,33,0.11,40,0.23,63,0.013,64,0.013,192,2.145,360,2.145,525,2.869,581,3.431,583,4.347,689,3.849,817,4.347,1036,4.347,1037,5.198,1038,4.845,1039,6.697]],["title/classes/UpdateRelationshipDto.html",[33,0.075,965,2.735]],["body/classes/UpdateRelationshipDto.html",[3,0.229,4,0.203,5,0.203,19,0.016,29,0.338,33,0.109,40,0.229,63,0.013,64,0.013,360,2.136,525,2.858,590,3.418,592,4.33,689,3.84,964,4.33,965,4.742,1036,4.33,1040,4.827,1041,6.681,1042,4.827,1043,4.827]],["title/classes/UpdateUserDto.html",[33,0.075,1044,2.531]],["body/classes/UpdateUserDto.html",[3,0.137,4,0.122,5,0.122,9,0.309,16,0.86,19,0.016,21,0.734,29,0.281,33,0.093,34,1.279,39,1.542,40,0.137,63,0.01,64,0.01,70,1.819,72,1.303,118,2.92,125,3.383,192,1.279,300,3.105,325,1.413,360,1.279,500,1.223,575,4.506,576,2.582,577,4.378,589,2.74,594,2.37,674,2.92,735,3.7,774,2.37,779,4.323,792,2.592,793,2.37,794,2.37,795,2.592,902,4.302,903,4.302,904,4.302,905,3.945,906,5.244,907,4.123,908,4.123,909,4.123,910,4.123,911,2.889,913,4.123,914,2.889,916,4.123,917,4.123,918,2.889,924,3.945,925,3.7,926,2.889,930,3.65,931,2.889,933,4.123,934,4.123,935,2.889,936,4.123,937,4.123,938,4.123,939,2.889,940,5.325,942,2.889,943,2.37,1044,3.13,1045,5.936,1046,3.34,1047,3.34,1048,3.34,1049,3.34,1050,3.34,1051,3.34]],["title/entities/User.html",[46,0.968,322,1.779]],["body/entities/User.html",[3,0.113,4,0.101,5,0.101,9,0.255,16,0.947,19,0.016,21,0.829,29,0.252,33,0.081,34,1.057,39,1.274,40,0.113,46,1.042,63,0.008,64,0.008,70,2.003,72,1.445,222,3.533,279,2.696,281,2.696,299,2.088,300,2.55,322,1.914,323,1.495,325,1.229,326,3.533,329,3.269,331,5.132,337,2.539,339,4.61,341,3.817,344,1.69,345,1.157,346,4.466,353,3.928,354,5.058,587,4.21,674,2.539,779,2.861,793,1.959,794,1.959,796,2.142,797,2.142,902,3.533,903,3.533,904,3.533,905,3.533,924,4.21,925,5.016,930,3.896,943,1.959,1052,2.387,1053,4.306,1054,4.979,1055,4.306,1056,2.76,1057,4.145,1058,2.76,1059,2.76,1060,2.76,1061,2.76,1062,2.76,1063,2.76,1064,2.76,1065,2.76,1066,2.76,1067,2.76,1068,2.76,1069,5.132,1070,2.76,1071,2.76,1072,2.76,1073,2.76,1074,2.76]],["title/controllers/UsersController.html",[65,1.352,1075,2.735]],["body/controllers/UsersController.html",[3,0.137,4,0.122,5,0.234,9,0.31,10,1.2,16,0.718,18,1.519,19,0.016,20,1.519,21,0.613,22,1.519,27,1.399,29,0.347,31,0.5,33,0.066,40,0.137,42,1.341,46,1.861,48,2.205,53,1.288,54,1.813,63,0.01,64,0.01,65,1.174,67,1.174,70,1.519,72,1.088,75,1.924,139,1.924,147,2.515,165,3.409,167,1.282,173,2.598,174,3.706,175,1.813,178,3.706,179,2.598,182,2.925,183,1.924,184,1.715,186,2.376,187,1.715,191,1.924,192,1.282,193,2.598,194,1.813,197,2.895,204,2.598,205,2.598,206,2.598,207,2.598,208,2.598,209,2.598,210,2.598,211,2.598,212,2.598,213,2.598,214,2.598,215,2.598,263,2.851,299,2.545,394,2.925,395,2.925,497,2.895,505,1.924,513,2.895,657,2.376,1044,4.381,1075,3.389,1076,2.895,1077,3.347,1078,4.13,1079,4.13,1080,5.566,1081,2.895,1082,3.347,1083,3.347,1084,2.895,1085,3.347,1086,3.347,1087,3.347,1088,3.347,1089,3.347,1090,2.895,1091,2.895,1092,3.347,1093,3.347,1094,3.347,1095,3.347,1096,3.347,1097,3.347,1098,3.347,1099,3.347,1100,3.347]],["title/modules/UsersModule.html",[77,1.242,96,2.087]],["body/modules/UsersModule.html",[3,0.173,4,0.153,5,0.153,19,0.016,29,0.375,31,0.628,33,0.082,40,0.173,46,1.056,63,0.011,64,0.011,67,1.959,77,2.021,79,1.848,80,1.848,81,2.042,82,2.042,83,1.848,84,3.048,85,3.048,92,3.476,96,4.066,97,2.713,98,2.042,99,1.941,101,3.025,108,2.574,187,2.153,194,2.276,243,3.262,244,3.421,245,3.262,254,3.262,255,3.262,263,3.942,432,2.574,433,1.848,1075,4.453,1090,3.636,1101,3.636,1102,3.636,1103,4.203,1104,3.636,1105,4.203,1106,4.203,1107,3.636,1108,4.203]],["title/injectables/UsersService.html",[30,0.661,263,1.974]],["body/injectables/UsersService.html",[3,0.078,4,0.069,5,0.22,9,0.176,10,0.776,11,2.517,13,1.183,16,0.802,18,1.531,19,0.016,20,1.531,21,0.618,22,1.531,27,1.337,29,0.315,30,0.53,31,0.283,33,0.037,39,0.876,40,0.078,43,2.378,46,1.659,53,1.528,56,2.659,58,1.899,63,0.006,64,0.006,72,1.343,133,0.726,147,2.055,157,2.441,164,2.76,165,3.258,167,1.496,186,2.192,222,3.521,260,2.672,263,1.582,271,2.541,276,2.672,279,2.441,281,2.881,282,1.162,286,0.921,291,0.971,299,2.452,300,2.002,307,1.64,312,1.472,317,1.472,318,2.192,325,0.916,326,4.292,329,2.029,341,1.892,345,0.795,346,2.567,433,0.834,444,2.59,465,1.346,466,1.245,503,0.971,505,1.09,539,2.397,562,1.64,563,1.64,564,1.64,565,1.64,566,1.64,567,2.672,587,3.198,779,2.246,849,2.774,861,1.64,862,1.64,902,2.774,903,2.774,904,2.774,905,2.192,930,1.245,943,1.346,1044,2.959,1053,2.672,1055,1.64,1078,2.672,1079,2.672,1081,2.672,1084,2.672,1091,1.64,1107,1.64,1109,1.64,1110,3.909,1111,3.909,1112,3.909,1113,3.089,1114,3.089,1115,3.909,1116,1.896,1117,1.896,1118,3.089,1119,1.896,1120,3.089,1121,1.896,1122,3.089,1123,1.896,1124,3.089,1125,5.32,1126,1.896,1127,1.896,1128,1.896,1129,1.896,1130,1.896,1131,1.896,1132,1.896,1133,1.896,1134,1.896,1135,1.896,1136,1.64,1137,1.896,1138,3.089,1139,1.896,1140,1.896,1141,1.896,1142,4.506,1143,3.909,1144,3.089,1145,4.506,1146,1.896,1147,1.896,1148,3.089,1149,1.896,1150,3.089,1151,1.896,1152,1.896,1153,3.089,1154,1.896,1155,1.896]],["title/coverage.html",[1156,4.089]],["body/coverage.html",[0,3.361,1,1.685,5,0.087,6,2.942,7,2.147,8,2.054,15,1.097,19,0.016,21,0.262,30,1.21,33,0.138,35,2.251,36,1.706,46,0.929,63,0.007,64,0.007,65,2.224,66,1.685,68,2.054,73,1.455,83,1.044,113,2.002,114,2.427,134,2.054,137,1.685,138,2.054,147,0.87,152,1.56,153,1.455,164,1.455,167,0.909,180,1.365,182,1.455,183,1.365,185,1.685,189,1.685,232,1.56,233,1.56,244,1.455,256,2.054,263,1.217,322,2.561,324,2.054,347,1.455,348,1.843,349,2.868,359,1.56,361,2.054,362,3.219,365,1.685,366,2.868,397,1.56,399,1.685,400,1.893,405,1.685,439,2.868,445,1.154,483,1.685,484,2.054,489,1.56,493,1.56,496,1.56,500,0.87,524,2.054,528,1.286,568,2.054,569,3.219,578,1.455,579,3.187,580,2.054,581,1.455,582,2.054,583,2.868,590,1.455,591,2.054,592,2.868,599,2.054,609,1.843,625,2.054,627,2.054,633,1.685,634,2.054,641,1.685,654,1.56,658,1.455,683,2.264,685,2.054,686,1.843,687,2.054,688,2.868,701,1.843,725,2.054,759,1.843,760,2.054,763,2.054,774,3.219,798,2.054,802,2.054,810,1.685,811,2.054,815,1.455,829,2.054,839,2.054,944,2.054,951,1.685,952,2.054,965,1.685,982,2.054,1010,2.868,1019,1.685,1020,1.685,1030,2.054,1034,2.054,1037,1.843,1038,2.054,1040,2.054,1044,1.56,1045,2.054,1052,2.054,1075,1.685,1076,2.054,1109,2.054,1156,1.843,1157,2.054,1158,2.375,1159,2.375,1160,7.956,1161,5.546,1162,5.546,1163,2.375,1164,5.546,1165,7.256,1166,7.134,1167,3.696,1168,2.054,1169,5.873,1170,4.797,1171,3.696,1172,2.054,1173,2.375,1174,2.375,1175,2.375,1176,2.375,1177,2.375]],["title/dependencies.html",[80,2.039,1178,2.78]],["body/dependencies.html",[19,0.016,31,0.709,33,0.118,34,1.817,63,0.012,64,0.012,80,2.087,107,2.907,187,2.431,192,1.817,194,2.571,237,3.684,241,2.907,345,1.991,433,2.087,699,3.369,710,3.684,733,5.164,762,3.684,1016,3.684,1042,4.106,1043,4.106,1136,4.106,1179,6.653,1180,4.747,1181,4.747,1182,4.747,1183,4.747,1184,4.747,1185,4.747,1186,4.747,1187,4.747,1188,4.747,1189,4.747,1190,4.747,1191,4.747,1192,4.747,1193,4.747,1194,4.747,1195,4.747,1196,4.747,1197,4.747,1198,4.747,1199,4.747,1200,4.747,1201,4.747,1202,4.747,1203,4.747]],["title/miscellaneous/enumerations.html",[1204,1.968,1205,4.011]],["body/miscellaneous/enumerations.html",[9,0.364,19,0.016,38,3.274,46,1.636,63,0.011,64,0.011,113,2.895,175,2.895,182,3.274,286,2.597,398,3.794,401,3.794,402,5.053,537,3.51,849,5.674,892,4.624,924,3.794,930,3.51,954,3.794,991,4.624,1005,4.624,1069,4.624,1204,2.411,1205,3.405,1206,7.49,1207,5.346,1208,5.346,1209,5.346,1210,5.346,1211,3.937,1212,5.346,1213,5.346,1214,4.624,1215,5.346,1216,5.346,1217,5.346,1218,5.346,1219,5.346,1220,5.346,1221,5.346]],["title/miscellaneous/functions.html",[1204,1.968,1222,4.011]],["body/miscellaneous/functions.html",[9,0.558,19,0.014,63,0.014,64,0.014,83,3.248,1172,5.213,1204,3.691,1222,5.213,1223,6.026]],["title/index.html",[9,0.297,1224,3.214,1225,3.214]],["body/index.html",[4,0.131,19,0.015,63,0.01,64,0.01,99,2.898,444,2.074,577,3.808,681,3.122,779,2.074,838,5.016,954,2.561,1156,2.801,1157,3.122,1214,3.122,1226,3.609,1227,3.609,1228,5.799,1229,3.609,1230,3.609,1231,3.609,1232,3.609,1233,3.609,1234,3.609,1235,5.799,1236,3.609,1237,3.609,1238,6.275,1239,3.609,1240,7.016,1241,3.609,1242,7.016,1243,3.609,1244,3.609,1245,3.609,1246,5.035,1247,3.609,1248,3.609,1249,3.609,1250,5.799,1251,3.609,1252,5.035,1253,3.609,1254,3.609,1255,3.609,1256,6.275,1257,3.609,1258,3.609,1259,3.609,1260,3.609,1261,3.609,1262,6.275,1263,5.035,1264,3.609,1265,5.799,1266,3.609,1267,5.428,1268,5.035,1269,3.609,1270,3.609,1271,3.609,1272,3.609,1273,3.609,1274,3.609,1275,5.799,1276,3.609,1277,3.609,1278,5.035,1279,3.609,1280,3.609,1281,3.609,1282,3.609,1283,3.609,1284,3.609,1285,3.609,1286,3.609,1287,3.609,1288,3.609,1289,5.035,1290,3.609,1291,3.609,1292,3.609,1293,3.609,1294,5.035,1295,3.609,1296,3.609,1297,3.609,1298,5.035,1299,5.035,1300,3.609,1301,3.609,1302,3.609,1303,3.609,1304,3.609,1305,3.609,1306,3.609,1307,3.609,1308,3.609,1309,3.609,1310,3.609,1311,3.122,1312,3.609,1313,3.609,1314,3.609,1315,3.609,1316,3.609,1317,3.609,1318,3.122]],["title/modules.html",[79,2.317]],["body/modules.html",[19,0.013,63,0.013,64,0.013,78,3.687,79,2.284,89,3.411,90,2.985,91,3.182,92,2.524,93,3.411,94,3.411,95,2.985,96,2.814,1267,6.749,1319,7.803,1320,7.803,1321,7.803]],["title/overview.html",[1322,4.557]],["body/overview.html",[2,2.019,15,3.09,19,0.016,51,2.019,63,0.009,64,0.009,67,1.078,73,3.249,77,0.99,78,5.443,79,1.352,80,1.352,81,1.493,82,1.493,83,1.352,84,1.493,85,1.493,86,2.659,87,2.659,88,2.659,89,4.786,90,4.141,91,4.355,92,3.399,93,4.075,94,4.595,95,4.188,96,3.851,97,2.181,98,1.493,99,1.419,133,1.177,180,3.846,228,2.659,229,2.659,231,2.659,232,3.483,233,3.483,263,3.428,323,1.665,360,1.177,425,2.659,426,2.659,428,2.659,445,3.251,515,2.659,516,2.659,517,2.659,528,3.625,596,2.659,605,2.659,606,2.659,607,4.528,658,3.249,670,2.659,671,2.659,684,2.386,784,2.659,815,3.249,822,2.659,824,2.659,974,2.659,975,2.659,976,2.659,1101,2.659,1102,2.659,1104,2.659,1322,2.659,1323,3.074,1324,3.074,1325,4.49]],["title/properties.html",[325,1.374,1178,2.78]],["body/properties.html",[19,0.016,63,0.014,64,0.014,325,1.764,779,3.42,1311,5.148,1318,5.148,1326,5.951,1327,5.951,1328,5.951]],["title/miscellaneous/variables.html",[1204,1.968,1329,4.011]],["body/miscellaneous/variables.html",[9,0.382,11,1.513,19,0.016,21,0.731,24,2.237,43,2.023,44,2.53,46,1.387,47,2.712,53,1.277,62,2.006,63,0.011,64,0.011,72,1.216,106,3.809,167,1.581,182,3.382,183,3.173,247,3.205,253,2.712,271,2.116,279,2.237,300,2.116,323,2.237,346,4.675,500,2.023,607,3.205,609,4.285,612,3.573,613,3.573,614,3.573,615,3.573,616,3.573,617,3.573,618,3.573,619,3.573,620,3.573,621,3.573,622,3.573,623,3.573,624,3.573,701,4.285,719,3.573,849,5.053,1011,3.205,1019,4.414,1168,3.573,1170,3.573,1204,2.53,1329,3.573,1330,4.13,1331,6.92,1332,4.13,1333,4.13,1334,5.521,1335,4.13,1336,4.13,1337,4.13,1338,4.13,1339,4.13,1340,4.13]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateGroupMemberDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"modules/DatabaseModule.html":{},"classes/DeleteConversationDto.html":{},"guards/FriendRelationshipGuard.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"injectables/GroupMembersService.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/MemberConversationGuard.html":{},"entities/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateRelationshipDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1160,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1327,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1188,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1201,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1203,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1187,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1194,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1165,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1167,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1161,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1166,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1164,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1171,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1162,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1175,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1163,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1174,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":1196,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":1191,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":788,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["10.0.0",{"_index":1179,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1184,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1182,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1181,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["1024",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["12345678",{"_index":790,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["14",{"_index":1325,"title":{},"body":{"overview.html":{}}}],["2",{"_index":596,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"overview.html":{}}}],["20",{"_index":913,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["3.11.3",{"_index":1193,"title":{},"body":{"dependencies.html":{}}}],["3.2.3",{"_index":1180,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":51,"title":{},"body":{"guards/AdminConversationGuard.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"guards/MemberConversationGuard.html":{},"overview.html":{}}}],["4.0.1",{"_index":1195,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1324,"title":{},"body":{"overview.html":{}}}],["5.1.1",{"_index":1185,"title":{},"body":{"dependencies.html":{}}}],["7.4.2",{"_index":1183,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1202,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":784,"title":{},"body":{"classes/LoginUserDto.html":{},"overview.html":{}}}],["8.13.0",{"_index":1198,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1323,"title":{},"body":{"overview.html":{}}}],["__dirname",{"_index":621,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":678,"title":{},"body":{"injectables/GroupMembersService.html":{}}}],["add",{"_index":549,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["addfiletypevalidator",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["addmaxsizevalidator",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["addmember",{"_index":368,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{}}}],["addmember(@body",{"_index":411,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["addmember(dto",{"_index":373,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{}}}],["address",{"_index":902,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["address'})@isoptional",{"_index":911,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["adds",{"_index":679,"title":{},"body":{"injectables/GroupMembersService.html":{}}}],["admin",{"_index":402,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationsService.html":{},"miscellaneous/enumerations.html":{}}}],["admin')@useguards(adminconversationguard",{"_index":387,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["admin')@useguards(creatorconversationguard",{"_index":379,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["admin.ts",{"_index":8,"title":{},"body":{"guards/AdminConversationGuard.html":{},"coverage.html":{}}}],["admin.ts:7",{"_index":17,"title":{},"body":{"guards/AdminConversationGuard.html":{}}}],["admin.ts:9",{"_index":25,"title":{},"body":{"guards/AdminConversationGuard.html":{}}}],["adminconversationguard",{"_index":1,"title":{"guards/AdminConversationGuard.html":{}},"body":{"guards/AdminConversationGuard.html":{},"controllers/ConversationMembersController.html":{},"coverage.html":{}}}],["age",{"_index":903,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["age'})@isoptional",{"_index":914,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["already",{"_index":861,"title":{},"body":{"injectables/MulterConfigService.html":{},"injectables/UsersService.html":{}}}],["amazing",{"_index":1304,"title":{},"body":{"index.html":{}}}],["angry",{"_index":1221,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apibody",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/RelationshipsController.html":{}}}],["apiproperty",{"_index":575,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({example",{"_index":906,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["apitags",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"controllers/GroupMembersController.html":{},"controllers/MessagesController.html":{},"controllers/RelationshipsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('conversation",{"_index":407,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["apitags('conversations",{"_index":507,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["apitags('group",{"_index":659,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["apitags('messages",{"_index":818,"title":{},"body":{"controllers/MessagesController.html":{}}}],["apitags('relationships",{"_index":966,"title":{},"body":{"controllers/RelationshipsController.html":{}}}],["apitags('users",{"_index":1092,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":66,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1278,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1234,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":78,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":73,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":11,"title":{},"body":{"guards/AdminConversationGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"modules/DatabaseModule.html":{},"guards/FriendRelationshipGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/MemberConversationGuard.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/RelationshipsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":242,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":688,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:14",{"_index":694,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:19",{"_index":695,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:31",{"_index":697,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":137,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":700,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":690,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":761,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":89,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1311,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorization",{"_index":747,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authservice",{"_index":180,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["avatar",{"_index":326,"title":{},"body":{"entities/Conversation.html":{},"injectables/ConversationsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["await",{"_index":56,"title":{},"body":{"guards/AdminConversationGuard.html":{},"injectables/AuthService.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"injectables/LocalStrategy.html":{},"guards/MemberConversationGuard.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/RelationshipsService.html":{},"injectables/UsersService.html":{}}}],["b",{"_index":713,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["backers",{"_index":1305,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"injectables/RelationshipsService.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('cannot",{"_index":418,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["badrequestexception('refresh",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception(`email",{"_index":1147,"title":{},"body":{"injectables/UsersService.html":{}}}],["basename",{"_index":898,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["bcrypt",{"_index":1136,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["bearer",{"_index":750,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["board",{"_index":1297,"title":{},"body":{"index.html":{}}}],["body",{"_index":48,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AuthController.html":{},"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"controllers/GroupMembersController.html":{},"guards/MemberConversationGuard.html":{},"controllers/MessagesController.html":{},"controllers/RelationshipsController.html":{},"controllers/UsersController.html":{}}}],["body.conversation_id",{"_index":59,"title":{},"body":{"guards/AdminConversationGuard.html":{},"guards/CreatorConversationGuard.html":{},"guards/MemberConversationGuard.html":{}}}],["body.user_id",{"_index":632,"title":{},"body":{"guards/FriendRelationshipGuard.html":{}}}],["bootstrap",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupMembersModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["boy",{"_index":917,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["break",{"_index":871,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["browse",{"_index":1321,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1319,"title":{},"body":{"modules.html":{}}}],["build",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["building",{"_index":1229,"title":{},"body":{"index.html":{}}}],["bảo",{"_index":702,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["c",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["c:codeproject",{"_index":332,"title":{},"body":{"entities/Conversation.html":{}}}],["callhandler",{"_index":1014,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":12,"title":{},"body":{"guards/AdminConversationGuard.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"injectables/JwtAuthGuard.html":{},"guards/MemberConversationGuard.html":{}}}],["canactivate(context",{"_index":23,"title":{},"body":{"guards/AdminConversationGuard.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"injectables/JwtAuthGuard.html":{},"guards/MemberConversationGuard.html":{}}}],["case",{"_index":865,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["catch",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/UsersService.html":{}}}],["cau",{"_index":907,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["cb",{"_index":884,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["cb(null",{"_index":888,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["channel",{"_index":1270,"title":{},"body":{"index.html":{}}}],["chat",{"_index":571,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["check",{"_index":1256,"title":{},"body":{"index.html":{}}}],["checkpermission",{"_index":440,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["checkpermission(user_id",{"_index":449,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["chiến",{"_index":737,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["cho",{"_index":711,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["chưa",{"_index":771,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["class",{"_index":33,"title":{"classes/ConversationMemberDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateGroupMemberDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/DeleteConversationDto.html":{},"classes/GroupMember.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateRelationshipDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateGroupMemberDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"modules/DatabaseModule.html":{},"classes/DeleteConversationDto.html":{},"guards/FriendRelationshipGuard.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"injectables/GroupMembersService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/MemberConversationGuard.html":{},"entities/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateRelationshipDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":360,"title":{},"body":{"classes/ConversationMemberDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateGroupMemberDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/DeleteConversationDto.html":{},"classes/GroupMember.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateRelationshipDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_conversationmembersmodule",{"_index":425,"title":{},"body":{"modules/ConversationMembersModule.html":{},"overview.html":{}}}],["cluster_conversationmembersmodule_exports",{"_index":428,"title":{},"body":{"modules/ConversationMembersModule.html":{},"overview.html":{}}}],["cluster_conversationmembersmodule_imports",{"_index":427,"title":{},"body":{"modules/ConversationMembersModule.html":{}}}],["cluster_conversationmembersmodule_providers",{"_index":426,"title":{},"body":{"modules/ConversationMembersModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule",{"_index":515,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_exports",{"_index":516,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_imports",{"_index":518,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["cluster_conversationsmodule_providers",{"_index":517,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":605,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_exports",{"_index":606,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_groupmembersmodule",{"_index":670,"title":{},"body":{"modules/GroupMembersModule.html":{},"overview.html":{}}}],["cluster_groupmembersmodule_providers",{"_index":671,"title":{},"body":{"modules/GroupMembersModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":822,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_imports",{"_index":823,"title":{},"body":{"modules/MessagesModule.html":{}}}],["cluster_messagesmodule_providers",{"_index":824,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_relationshipsmodule",{"_index":974,"title":{},"body":{"modules/RelationshipsModule.html":{},"overview.html":{}}}],["cluster_relationshipsmodule_exports",{"_index":975,"title":{},"body":{"modules/RelationshipsModule.html":{},"overview.html":{}}}],["cluster_relationshipsmodule_imports",{"_index":977,"title":{},"body":{"modules/RelationshipsModule.html":{}}}],["cluster_relationshipsmodule_providers",{"_index":976,"title":{},"body":{"modules/RelationshipsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1101,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1104,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1103,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1102,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmservice",{"_index":831,"title":{},"body":{"injectables/MessagesService.html":{}}}],["column",{"_index":339,"title":{},"body":{"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/GroupMember.html":{},"entities/Message.html":{},"entities/Relationship.html":{},"entities/User.html":{}}}],["column()@minlength(8)@maxlength(10",{"_index":1065,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":331,"title":{},"body":{"entities/Conversation.html":{},"entities/User.html":{}}}],["column({type",{"_index":353,"title":{},"body":{"entities/ConversationMember.html":{},"classes/GroupMember.html":{},"entities/Relationship.html":{},"entities/User.html":{}}}],["come",{"_index":1259,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1216,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["comparesync",{"_index":1133,"title":{},"body":{"injectables/UsersService.html":{}}}],["comparesync(password",{"_index":1141,"title":{},"body":{"injectables/UsersService.html":{}}}],["config",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["configmodule.forroot",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('jwt_access_expire",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_access_token_secret",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('postgres_db",{"_index":620,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('postgres_host",{"_index":614,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('postgres_password",{"_index":618,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('postgres_port",{"_index":616,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('postgres_sync",{"_index":624,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["configservice.get('postgres_user",{"_index":617,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["console.error('error",{"_index":564,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/UsersService.html":{}}}],["console.error(error",{"_index":881,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["console.log('directory",{"_index":858,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["const",{"_index":43,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/MemberConversationGuard.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"injectables/RelationshipsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":13,"title":{},"body":{"guards/AdminConversationGuard.html":{},"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/MemberConversationGuard.html":{},"injectables/MessagesService.html":{},"injectables/RelationshipsService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":764,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":727,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(conversationmembersrepository",{"_index":443,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["constructor(conversationmembersservice",{"_index":14,"title":{},"body":{"guards/AdminConversationGuard.html":{},"guards/MemberConversationGuard.html":{}}}],["constructor(conversationsrepository",{"_index":527,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["constructor(conversationsservice",{"_index":600,"title":{},"body":{"guards/CreatorConversationGuard.html":{}}}],["constructor(messagesrepository",{"_index":830,"title":{},"body":{"injectables/MessagesService.html":{}}}],["constructor(private",{"_index":42,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"controllers/GroupMembersController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/MessagesController.html":{},"controllers/RelationshipsController.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":692,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/TransformInterceptor.html":{}}}],["constructor(relationshipsrepository",{"_index":984,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["constructor(relationshipsservice",{"_index":628,"title":{},"body":{"guards/FriendRelationshipGuard.html":{}}}],["constructor(usersrepository",{"_index":1116,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["contains",{"_index":875,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["context",{"_index":26,"title":{},"body":{"guards/AdminConversationGuard.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"injectables/JwtAuthGuard.html":{},"guards/MemberConversationGuard.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["context.getclass",{"_index":722,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":721,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["context.switchtohttp().getrequest",{"_index":45,"title":{},"body":{"guards/AdminConversationGuard.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"guards/MemberConversationGuard.html":{}}}],["context.switchtohttp().getresponse().statuscode",{"_index":1025,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["controller",{"_index":65,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"controllers/GroupMembersController.html":{},"controllers/MessagesController.html":{},"controllers/RelationshipsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"controllers/GroupMembersController.html":{},"controllers/MessagesController.html":{},"controllers/RelationshipsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('/auth",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('conversation",{"_index":408,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["controller('conversations",{"_index":508,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["controller('group",{"_index":660,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["controller('messages",{"_index":819,"title":{},"body":{"controllers/MessagesController.html":{}}}],["controller('relationships",{"_index":967,"title":{},"body":{"controllers/RelationshipsController.html":{}}}],["controller('users",{"_index":1093,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["conversation",{"_index":7,"title":{"entities/Conversation.html":{}},"body":{"guards/AdminConversationGuard.html":{},"modules/AppModule.html":{},"entities/Conversation.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"guards/MemberConversationGuard.html":{},"coverage.html":{}}}],["conversation')@useguards(memberconversationguard)@useinterceptors(undefined",{"_index":498,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["conversation.conversation_id",{"_index":551,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["conversation.dto",{"_index":504,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["conversation.dto.ts",{"_index":569,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/UpdateConversationDto.html":{},"coverage.html":{}}}],["conversation.dto.ts:10",{"_index":1033,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:11",{"_index":574,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:6",{"_index":1031,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:7",{"_index":572,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{}}}],["conversation.jpg",{"_index":335,"title":{},"body":{"entities/Conversation.html":{}}}],["conversation_id",{"_index":327,"title":{},"body":{"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"entities/Message.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{}}}],["conversationmember",{"_index":347,"title":{"entities/ConversationMember.html":{}},"body":{"entities/ConversationMember.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["conversationmember.membertype",{"_index":479,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["conversationmember_id",{"_index":350,"title":{},"body":{"entities/ConversationMember.html":{}}}],["conversationmemberdto",{"_index":359,"title":{"classes/ConversationMemberDto.html":{}},"body":{"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"coverage.html":{}}}],["conversationmemberscontroller",{"_index":365,"title":{"controllers/ConversationMembersController.html":{}},"body":{"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"coverage.html":{}}}],["conversationmembersmodule",{"_index":90,"title":{"modules/ConversationMembersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["conversationmembersrepository",{"_index":447,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["conversationmembersservice",{"_index":15,"title":{"injectables/ConversationMembersService.html":{}},"body":{"guards/AdminConversationGuard.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"guards/MemberConversationGuard.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["conversationname",{"_index":328,"title":{},"body":{"entities/Conversation.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/UpdateConversationDto.html":{}}}],["conversations",{"_index":485,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["conversations.controller",{"_index":521,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["conversations.service",{"_index":520,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["conversations/conversations.module",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["conversations/conversations.service",{"_index":463,"title":{},"body":{"injectables/ConversationMembersService.html":{},"guards/CreatorConversationGuard.html":{},"guards/MemberConversationGuard.html":{}}}],["conversationscontroller",{"_index":483,"title":{"controllers/ConversationsController.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"coverage.html":{}}}],["conversationsmodule",{"_index":91,"title":{"modules/ConversationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules.html":{},"overview.html":{}}}],["conversationsrepository",{"_index":530,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["conversationsservice",{"_index":445,"title":{"injectables/ConversationsService.html":{}},"body":{"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"guards/MemberConversationGuard.html":{},"modules/MessagesModule.html":{},"coverage.html":{},"overview.html":{}}}],["cookie",{"_index":1189,"title":{},"body":{"dependencies.html":{}}}],["courses",{"_index":1276,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1156,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["creare",{"_index":486,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["creare(@user",{"_index":509,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["creare(user",{"_index":488,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["create",{"_index":525,"title":{},"body":{"injectables/ConversationsService.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateRelationshipDto.html":{}}}],["create(@body",{"_index":661,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["create(creategroupmemberdto",{"_index":645,"title":{},"body":{"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{}}}],["create(user",{"_index":531,"title":{},"body":{"injectables/ConversationsService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{}}}],["createadmin",{"_index":441,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["createadmin(dto",{"_index":451,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["createconversationdto",{"_index":489,"title":{"classes/CreateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"coverage.html":{}}}],["created",{"_index":860,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["createdat",{"_index":329,"title":{},"body":{"entities/Conversation.html":{},"injectables/ConversationsService.html":{},"entities/Message.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["createdby",{"_index":330,"title":{},"body":{"entities/Conversation.html":{},"injectables/ConversationsService.html":{},"entities/Message.html":{}}}],["creategroupmemberdto",{"_index":578,"title":{"classes/CreateGroupMemberDto.html":{}},"body":{"classes/CreateGroupMemberDto.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"classes/UpdateGroupMemberDto.html":{},"coverage.html":{}}}],["createmessagedto",{"_index":581,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessgageDto.html":{},"coverage.html":{}}}],["createmulteroptions",{"_index":841,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["createparamdecorator",{"_index":1338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createrefreshtoken",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["createrefreshtoken(payload",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["createrelationshipdto",{"_index":590,"title":{"classes/CreateRelationshipDto.html":{}},"body":{"classes/CreateRelationshipDto.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"classes/UpdateRelationshipDto.html":{},"coverage.html":{}}}],["creator",{"_index":406,"title":{},"body":{"controllers/ConversationMembersController.html":{},"guards/CreatorConversationGuard.html":{}}}],["creator.createdby",{"_index":604,"title":{},"body":{"guards/CreatorConversationGuard.html":{}}}],["creator.ts",{"_index":599,"title":{},"body":{"guards/CreatorConversationGuard.html":{},"coverage.html":{}}}],["creator.ts:6",{"_index":601,"title":{},"body":{"guards/CreatorConversationGuard.html":{}}}],["creator.ts:8",{"_index":602,"title":{},"body":{"guards/CreatorConversationGuard.html":{}}}],["creatorconversationguard",{"_index":405,"title":{"guards/CreatorConversationGuard.html":{}},"body":{"controllers/ConversationMembersController.html":{},"guards/CreatorConversationGuard.html":{},"coverage.html":{}}}],["credentials",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["ctx",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["các",{"_index":704,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["cấu",{"_index":741,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cần",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["cầu",{"_index":707,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["data",{"_index":1011,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["data_source",{"_index":607,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":619,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["database.providers",{"_index":610,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databasemodule",{"_index":92,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseproviders",{"_index":609,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":1334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource.initialize",{"_index":1335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":341,"title":{},"body":{"entities/Conversation.html":{},"injectables/ConversationsService.html":{},"entities/Message.html":{},"injectables/MessagesService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["date.now()}${extname",{"_index":901,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["declarations",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupMembersModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/DeleteConversationDto.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"classes/LoginUserDto.html":{},"entities/Message.html":{},"controllers/MessagesController.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"controllers/RelationshipsController.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1272,"title":{},"body":{"index.html":{}}}],["default",{"_index":346,"title":{},"body":{"entities/Conversation.html":{},"injectables/MulterConfigService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":16,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"classes/DeleteConversationDto.html":{},"guards/FriendRelationshipGuard.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/MemberConversationGuard.html":{},"entities/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":395,"title":{},"body":{"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"controllers/GroupMembersController.html":{},"controllers/MessagesController.html":{},"controllers/RelationshipsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":651,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["delete('delete",{"_index":378,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["delete()@responsemessage('delete",{"_index":1082,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteadmin",{"_index":369,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{}}}],["deleteadmin(@user",{"_index":423,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["deleteadmin(dto",{"_index":453,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["deleteadmin(user",{"_index":377,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["deleteconversationdto",{"_index":493,"title":{"classes/DeleteConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["deletedat",{"_index":1053,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["deletemember",{"_index":370,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{}}}],["deletemember(@body",{"_index":421,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["deletemember(dto",{"_index":381,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{}}}],["deleteuser",{"_index":1078,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(@user",{"_index":1098,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(user",{"_index":1081,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleting",{"_index":565,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/UsersService.html":{}}}],["denied",{"_index":880,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["dependencies",{"_index":80,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupMembersModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":779,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["description'})@isoptional",{"_index":918,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["destination",{"_index":883,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["development",{"_index":1243,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1283,"title":{},"body":{"index.html":{}}}],["dir",{"_index":877,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["directory",{"_index":870,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["discord",{"_index":1269,"title":{},"body":{"index.html":{}}}],["diskstorage",{"_index":852,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["dive",{"_index":1271,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1157,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"injectables/UsersService.html":{}}}],["dto.conversation_id",{"_index":471,"title":{},"body":{"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{}}}],["dto.conversationname",{"_index":546,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.user_id",{"_index":417,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{}}}],["dto/conversation",{"_index":403,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{}}}],["dto/create",{"_index":503,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"injectables/UsersService.html":{}}}],["dto/delete",{"_index":506,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["dto/update",{"_index":505,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"controllers/RelationshipsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dùng",{"_index":735,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["dưới",{"_index":748,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{}}}],["dạng",{"_index":749,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{}}}],["dạng'})@isstring({message",{"_index":776,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["dấu",{"_index":716,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["dẫn",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["dụng",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["e2e",{"_index":1253,"title":{},"body":{"index.html":{}}}],["eexist",{"_index":866,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["efficient",{"_index":1230,"title":{},"body":{"index.html":{}}}],["email",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["enotdir",{"_index":872,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["ensureexists",{"_index":842,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["ensureexists(targetdirectory",{"_index":845,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["enterprise",{"_index":1288,"title":{},"body":{"index.html":{}}}],["entities",{"_index":323,"title":{},"body":{"entities/Conversation.html":{},"entities/ConversationMember.html":{},"modules/DatabaseModule.html":{},"entities/Message.html":{},"entities/Relationship.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/conversation",{"_index":434,"title":{},"body":{"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{}}}],["entities/conversation.entity",{"_index":522,"title":{},"body":{"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{}}}],["entities/messgage.entity",{"_index":826,"title":{},"body":{"modules/MessagesModule.html":{},"injectables/MessagesService.html":{}}}],["entities/relationship.entity",{"_index":980,"title":{},"body":{"modules/RelationshipsModule.html":{},"injectables/RelationshipsService.html":{}}}],["entities/user.entity",{"_index":1107,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":322,"title":{"entities/Conversation.html":{},"entities/ConversationMember.html":{},"entities/Message.html":{},"entities/Relationship.html":{},"entities/User.html":{}},"body":{"entities/Conversation.html":{},"entities/ConversationMember.html":{},"entities/Message.html":{},"entities/Relationship.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity('messages",{"_index":809,"title":{},"body":{"entities/Message.html":{}}}],["entity{.ts,.js",{"_index":622,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["enum",{"_index":354,"title":{},"body":{"entities/ConversationMember.html":{},"classes/GroupMember.html":{},"entities/Relationship.html":{},"entities/User.html":{}}}],["enumerations",{"_index":1205,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":698,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/MulterConfigService.html":{},"injectables/UsersService.html":{}}}],["error.code",{"_index":864,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["errorhttpstatuscode",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["example",{"_index":577,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{}}}],["executioncontext",{"_index":24,"title":{},"body":{"guards/AdminConversationGuard.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"injectables/JwtAuthGuard.html":{},"guards/MemberConversationGuard.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["existes",{"_index":472,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["exists",{"_index":862,"title":{},"body":{"injectables/MulterConfigService.html":{},"injectables/UsersService.html":{}}}],["experience",{"_index":1274,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":40,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateGroupMemberDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"modules/DatabaseModule.html":{},"classes/DeleteConversationDto.html":{},"guards/FriendRelationshipGuard.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"injectables/GroupMembersService.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/MemberConversationGuard.html":{},"entities/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateRelationshipDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupMembersModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/MulterConfigService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["extends",{"_index":689,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateRelationshipDto.html":{}}}],["extension",{"_index":893,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["extname",{"_index":894,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["extractjwt",{"_index":731,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":752,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":54,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"injectables/JwtStrategy.html":{},"guards/MemberConversationGuard.html":{},"controllers/UsersController.html":{}}}],["female",{"_index":1213,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["few",{"_index":1257,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateGroupMemberDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"modules/DatabaseModule.html":{},"classes/DeleteConversationDto.html":{},"guards/FriendRelationshipGuard.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"injectables/GroupMembersService.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/MemberConversationGuard.html":{},"entities/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateRelationshipDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.path",{"_index":567,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/UsersService.html":{}}}],["fileinterceptor",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["fileisrequired",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["filename",{"_index":891,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["filetype",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["finalname",{"_index":900,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["findall",{"_index":642,"title":{},"body":{"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{}}}],["findconversation",{"_index":558,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["findconversation.avatar",{"_index":561,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["findconversionbyid",{"_index":526,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["findconversionbyid(conversation_id",{"_index":533,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["findmember",{"_index":55,"title":{},"body":{"guards/AdminConversationGuard.html":{},"injectables/ConversationMembersService.html":{},"guards/MemberConversationGuard.html":{}}}],["findmember(user_id",{"_index":456,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["findmember.membertype",{"_index":60,"title":{},"body":{"guards/AdminConversationGuard.html":{}}}],["findone",{"_index":643,"title":{},"body":{"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{}}}],["findone(@param('id",{"_index":664,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["findone(id",{"_index":648,"title":{},"body":{"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{}}}],["findrelationship",{"_index":983,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["findrelationship(user_id1",{"_index":987,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["finduser",{"_index":1154,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduser.avatar",{"_index":1155,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyemail",{"_index":1113,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyemail(useremail",{"_index":1120,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyid",{"_index":1079,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["finduserbyid(@param('user_id",{"_index":1095,"title":{},"body":{"controllers/UsersController.html":{}}}],["finduserbyid(user_id",{"_index":1084,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["finduserbytoken",{"_index":1110,"title":{},"body":{"injectables/UsersService.html":{}}}],["folder",{"_index":885,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["follow",{"_index":954,"title":{},"body":{"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["follow(@body",{"_index":969,"title":{},"body":{"controllers/RelationshipsController.html":{}}}],["follow(dto",{"_index":956,"title":{},"body":{"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{}}}],["followed",{"_index":1004,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["follower",{"_index":1005,"title":{},"body":{"injectables/RelationshipsService.html":{},"miscellaneous/enumerations.html":{}}}],["forbiddenexception",{"_index":464,"title":{},"body":{"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{}}}],["forbiddenexception(`user",{"_index":480,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["forwardref",{"_index":430,"title":{},"body":{"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{}}}],["found",{"_index":543,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["framework",{"_index":1228,"title":{},"body":{"index.html":{}}}],["friend",{"_index":401,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationsService.html":{},"injectables/RelationshipsService.html":{},"miscellaneous/enumerations.html":{}}}],["friend.ts",{"_index":627,"title":{},"body":{"guards/FriendRelationshipGuard.html":{},"coverage.html":{}}}],["friend.ts:12",{"_index":629,"title":{},"body":{"guards/FriendRelationshipGuard.html":{}}}],["friend.ts:14",{"_index":630,"title":{},"body":{"guards/FriendRelationshipGuard.html":{}}}],["friendrelationshipguard",{"_index":399,"title":{"guards/FriendRelationshipGuard.html":{}},"body":{"controllers/ConversationMembersController.html":{},"guards/FriendRelationshipGuard.html":{},"coverage.html":{}}}],["fs",{"_index":539,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MulterConfigService.html":{},"injectables/UsersService.html":{}}}],["fs.existssync(avatar",{"_index":562,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/UsersService.html":{}}}],["fs.mkdir(targetdirectory",{"_index":856,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["fs.unlinksync(avatar",{"_index":563,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/UsersService.html":{}}}],["full",{"_index":1287,"title":{},"body":{"index.html":{}}}],["function",{"_index":1173,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1222,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gender",{"_index":904,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["gender'})@isoptional",{"_index":926,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["gendertype",{"_index":924,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["gendertype.male",{"_index":942,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["generated",{"_index":358,"title":{},"body":{"entities/ConversationMember.html":{}}}],["gensaltsync",{"_index":1134,"title":{},"body":{"injectables/UsersService.html":{}}}],["gensaltsync(10",{"_index":1139,"title":{},"body":{"injectables/UsersService.html":{}}}],["get('/account",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/account')@responsemessage('get",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/refresh",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":649,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["get(':user_id",{"_index":1094,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethashpassword",{"_index":1111,"title":{},"body":{"injectables/UsersService.html":{}}}],["getrootpath",{"_index":840,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["getting",{"_index":1224,"title":{"index.html":{}},"body":{}}],["giay",{"_index":908,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["good",{"_index":916,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["graph",{"_index":1279,"title":{},"body":{"index.html":{}}}],["group",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateGroupMemberDto.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"injectables/GroupMembersService.html":{},"classes/UpdateGroupMemberDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["group_id",{"_index":635,"title":{},"body":{"classes/GroupMember.html":{}}}],["groupmember",{"_index":633,"title":{"classes/GroupMember.html":{}},"body":{"classes/GroupMember.html":{},"injectables/GroupMembersService.html":{},"coverage.html":{}}}],["groupmember_id",{"_index":636,"title":{},"body":{"classes/GroupMember.html":{}}}],["groupmembers",{"_index":680,"title":{},"body":{"injectables/GroupMembersService.html":{}}}],["groupmemberscontroller",{"_index":641,"title":{"controllers/GroupMembersController.html":{}},"body":{"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"coverage.html":{}}}],["groupmembersmodule",{"_index":93,"title":{"modules/GroupMembersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/GroupMembersModule.html":{},"modules.html":{},"overview.html":{}}}],["groupmembersservice",{"_index":658,"title":{"injectables/GroupMembersService.html":{}},"body":{"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"injectables/GroupMembersService.html":{},"coverage.html":{},"overview.html":{}}}],["grow",{"_index":1301,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AdminConversationGuard.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"guards/MemberConversationGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AdminConversationGuard.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"guards/MemberConversationGuard.html":{},"overview.html":{}}}],["ha",{"_index":909,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["haha",{"_index":1218,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["handlegetaccount",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["handlegetaccount(@user",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["handlegetaccount(user",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["handlelogin",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["handlelogin(dto",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["handlerefreshtoken",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["handlerefreshtoken(request",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["handleregister",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["handleregister(registeruserdto",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["handlerequest",{"_index":691,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":696,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hands",{"_index":1273,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1260,"title":{},"body":{"index.html":{}}}],["hash",{"_index":1125,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashpassword",{"_index":1148,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashsync",{"_index":1135,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashsync(password",{"_index":1140,"title":{},"body":{"injectables/UsersService.html":{}}}],["hay",{"_index":770,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["head",{"_index":746,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["help",{"_index":1285,"title":{},"body":{"index.html":{}}}],["helper/helper.enum",{"_index":357,"title":{},"body":{"entities/ConversationMember.html":{},"injectables/RelationshipsService.html":{}}}],["hendlelogout",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["hendlelogout(response",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["here",{"_index":1309,"title":{},"body":{"index.html":{}}}],["hierarchy",{"_index":874,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["home",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["host",{"_index":613,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["httponly",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://nestjs.com",{"_index":1315,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.unprocessable_entity",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["hình",{"_index":742,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["id",{"_index":595,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{}}}],["identifier",{"_index":1158,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":753,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":892,"title":{},"body":{"injectables/MulterConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["image's",{"_index":896,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["implements",{"_index":41,"title":{},"body":{"guards/AdminConversationGuard.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"guards/MemberConversationGuard.html":{},"injectables/MulterConfigService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["import",{"_index":29,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"modules/DatabaseModule.html":{},"classes/DeleteConversationDto.html":{},"guards/FriendRelationshipGuard.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"injectables/GroupMembersService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/MemberConversationGuard.html":{},"entities/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateRelationshipDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":101,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"classes/DeleteConversationDto.html":{},"guards/FriendRelationshipGuard.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/MemberConversationGuard.html":{},"entities/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateGroupMemberDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"modules/DatabaseModule.html":{},"classes/DeleteConversationDto.html":{},"guards/FriendRelationshipGuard.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"injectables/GroupMembersService.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/MemberConversationGuard.html":{},"entities/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateRelationshipDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["inject",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["inject(forwardref",{"_index":468,"title":{},"body":{"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{}}}],["injectable",{"_index":30,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"injectables/GroupMembersService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"injectables/RelationshipsService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{}},"body":{"guards/AdminConversationGuard.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"injectables/GroupMembersService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/MemberConversationGuard.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":133,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"injectables/GroupMembersService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"injectables/RelationshipsService.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":466,"title":{},"body":{"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{},"injectables/RelationshipsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(conversation",{"_index":540,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["injectrepository(conversationmember",{"_index":467,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["injectrepository(message",{"_index":835,"title":{},"body":{"injectables/MessagesService.html":{}}}],["injectrepository(relationship",{"_index":994,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["injectrepository(user",{"_index":1137,"title":{},"body":{"injectables/UsersService.html":{}}}],["installcompile",{"_index":1241,"title":{},"body":{"index.html":{}}}],["int",{"_index":1057,"title":{},"body":{"entities/User.html":{}}}],["interact",{"_index":1280,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":1021,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":1028,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["interface",{"_index":683,"title":{"interfaces/IUser.html":{},"interfaces/Response.html":{}},"body":{"interfaces/IUser.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":684,"title":{},"body":{"interfaces/IUser.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["invalid",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["is_public_key",{"_index":701,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":792,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isemail()@isstring()@isnotempty({message",{"_index":920,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["isglobal",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["isn't",{"_index":478,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["isnotempty",{"_index":589,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/DeleteConversationDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty({message",{"_index":594,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional",{"_index":940,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@apiproperty({example",{"_index":931,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["ispublic",{"_index":719,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["issemver",{"_index":941,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["isstring",{"_index":576,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/DeleteConversationDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@apiproperty({example",{"_index":570,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["isstring()@isnotempty",{"_index":626,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/UpdateConversationDto.html":{}}}],["isstring()@isnotempty({message",{"_index":584,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["isstring()@isoptional",{"_index":1032,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["isstring()@isuuid",{"_index":573,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["isuuid",{"_index":32,"title":{},"body":{"guards/AdminConversationGuard.html":{},"classes/ConversationMemberDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"guards/MemberConversationGuard.html":{}}}],["isuuid(body.conversation_id",{"_index":50,"title":{},"body":{"guards/AdminConversationGuard.html":{},"guards/CreatorConversationGuard.html":{},"guards/MemberConversationGuard.html":{}}}],["isuuid(body.user_id",{"_index":631,"title":{},"body":{"guards/FriendRelationshipGuard.html":{}}}],["isuuid(user.user_id",{"_index":52,"title":{},"body":{"guards/AdminConversationGuard.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"guards/MemberConversationGuard.html":{}}}],["isvalidpassword",{"_index":1114,"title":{},"body":{"injectables/UsersService.html":{}}}],["isvalidpassword(password",{"_index":1124,"title":{},"body":{"injectables/UsersService.html":{}}}],["it's",{"_index":869,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["iuser",{"_index":147,"title":{"interfaces/IUser.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["job",{"_index":1294,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1296,"title":{},"body":{"index.html":{}}}],["join",{"_index":1307,"title":{},"body":{"index.html":{}}}],["jpg|jpeg|png|gif",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["jwt",{"_index":710,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":686,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":751,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":236,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":232,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["k",{"_index":785,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["kamil",{"_index":1312,"title":{},"body":{"index.html":{}}}],["không",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["khẩu",{"_index":782,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["kiểm",{"_index":768,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["l",{"_index":717,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["learn",{"_index":1264,"title":{},"body":{"index.html":{}}}],["legend",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupMembersModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1318,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1299,"title":{},"body":{"index.html":{}}}],["linkedin",{"_index":1292,"title":{},"body":{"index.html":{}}}],["local",{"_index":762,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":759,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":233,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["location",{"_index":868,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["login",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login')@post('/login')@apibody({type",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(loginuserdto",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":152,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["logout",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout(response",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":1293,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1290,"title":{},"body":{"index.html":{}}}],["love",{"_index":1217,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lược",{"_index":738,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["lại",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["m",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["male",{"_index":1212,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["map",{"_index":1017,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["map((data",{"_index":1024,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["matching",{"_index":64,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateGroupMemberDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"modules/DatabaseModule.html":{},"classes/DeleteConversationDto.html":{},"guards/FriendRelationshipGuard.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"injectables/GroupMembersService.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/MemberConversationGuard.html":{},"entities/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateRelationshipDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maxage",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["maxlength",{"_index":793,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["maxlength(10",{"_index":797,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{}}}],["maxsize",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["mediatype",{"_index":1207,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["member",{"_index":398,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"miscellaneous/enumerations.html":{}}}],["member')@useguards(adminconversationguard",{"_index":382,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["member')@useguards(memberconversationguard",{"_index":375,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["member.dto",{"_index":404,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"classes/UpdateGroupMemberDto.html":{}}}],["member.dto.ts",{"_index":362,"title":{},"body":{"classes/ConversationMemberDto.html":{},"classes/CreateGroupMemberDto.html":{},"classes/UpdateGroupMemberDto.html":{},"coverage.html":{}}}],["member.dto.ts:5",{"_index":363,"title":{},"body":{"classes/ConversationMemberDto.html":{}}}],["member.dto.ts:8",{"_index":364,"title":{},"body":{"classes/ConversationMemberDto.html":{}}}],["member.entity",{"_index":435,"title":{},"body":{"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"modules/MessagesModule.html":{}}}],["member.entity.ts",{"_index":349,"title":{},"body":{"entities/ConversationMember.html":{},"classes/GroupMember.html":{},"coverage.html":{}}}],["member.entity.ts:10",{"_index":351,"title":{},"body":{"entities/ConversationMember.html":{}}}],["member.entity.ts:12",{"_index":637,"title":{},"body":{"classes/GroupMember.html":{}}}],["member.entity.ts:13",{"_index":356,"title":{},"body":{"entities/ConversationMember.html":{}}}],["member.entity.ts:15",{"_index":639,"title":{},"body":{"classes/GroupMember.html":{}}}],["member.entity.ts:16",{"_index":355,"title":{},"body":{"entities/ConversationMember.html":{}}}],["member.entity.ts:6",{"_index":638,"title":{},"body":{"classes/GroupMember.html":{}}}],["member.entity.ts:7",{"_index":352,"title":{},"body":{"entities/ConversationMember.html":{}}}],["member.entity.ts:9",{"_index":640,"title":{},"body":{"classes/GroupMember.html":{}}}],["member.ts",{"_index":798,"title":{},"body":{"guards/MemberConversationGuard.html":{},"coverage.html":{}}}],["member.ts:12",{"_index":800,"title":{},"body":{"guards/MemberConversationGuard.html":{}}}],["member.ts:7",{"_index":799,"title":{},"body":{"guards/MemberConversationGuard.html":{}}}],["memberconversationguard",{"_index":397,"title":{"guards/MemberConversationGuard.html":{}},"body":{"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"guards/MemberConversationGuard.html":{},"coverage.html":{}}}],["members",{"_index":367,"title":{},"body":{"controllers/ConversationMembersController.html":{},"controllers/GroupMembersController.html":{}}}],["members.controller",{"_index":431,"title":{},"body":{"modules/ConversationMembersModule.html":{},"modules/GroupMembersModule.html":{}}}],["members.controller.ts",{"_index":366,"title":{},"body":{"controllers/ConversationMembersController.html":{},"controllers/GroupMembersController.html":{},"coverage.html":{}}}],["members.controller.ts:21",{"_index":646,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["members.controller.ts:26",{"_index":647,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["members.controller.ts:31",{"_index":376,"title":{},"body":{"controllers/ConversationMembersController.html":{},"controllers/GroupMembersController.html":{}}}],["members.controller.ts:36",{"_index":656,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["members.controller.ts:37",{"_index":388,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["members.controller.ts:43",{"_index":392,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["members.controller.ts:44",{"_index":652,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["members.controller.ts:54",{"_index":383,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["members.controller.ts:60",{"_index":380,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["members.module",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/MessagesModule.html":{}}}],["members.module.ts",{"_index":429,"title":{},"body":{"modules/ConversationMembersModule.html":{},"modules/GroupMembersModule.html":{}}}],["members.service",{"_index":37,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationsService.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"guards/MemberConversationGuard.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{}}}],["members.service.ts",{"_index":439,"title":{},"body":{"injectables/ConversationMembersService.html":{},"injectables/GroupMembersService.html":{},"coverage.html":{}}}],["members.service.ts:105",{"_index":460,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["members.service.ts:11",{"_index":673,"title":{},"body":{"injectables/GroupMembersService.html":{}}}],["members.service.ts:118",{"_index":462,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["members.service.ts:15",{"_index":675,"title":{},"body":{"injectables/GroupMembersService.html":{}}}],["members.service.ts:18",{"_index":446,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["members.service.ts:19",{"_index":677,"title":{},"body":{"injectables/GroupMembersService.html":{}}}],["members.service.ts:23",{"_index":676,"title":{},"body":{"injectables/GroupMembersService.html":{}}}],["members.service.ts:26",{"_index":457,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["members.service.ts:35",{"_index":448,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["members.service.ts:51",{"_index":452,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["members.service.ts:61",{"_index":459,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["members.service.ts:65",{"_index":450,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["members.service.ts:7",{"_index":672,"title":{},"body":{"injectables/GroupMembersService.html":{}}}],["members.service.ts:81",{"_index":455,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["members.service.ts:93",{"_index":454,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["members/conversation",{"_index":36,"title":{},"body":{"guards/AdminConversationGuard.html":{},"modules/AppModule.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"guards/MemberConversationGuard.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{}}}],["members/dto/conversation",{"_index":361,"title":{},"body":{"classes/ConversationMemberDto.html":{},"coverage.html":{}}}],["members/dto/create",{"_index":580,"title":{},"body":{"classes/CreateGroupMemberDto.html":{},"coverage.html":{}}}],["members/dto/update",{"_index":1034,"title":{},"body":{"classes/UpdateGroupMemberDto.html":{},"coverage.html":{}}}],["members/entities/conversation",{"_index":348,"title":{},"body":{"entities/ConversationMember.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["members/entities/group",{"_index":634,"title":{},"body":{"classes/GroupMember.html":{},"coverage.html":{}}}],["members/group",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"injectables/GroupMembersService.html":{},"coverage.html":{}}}],["membertype",{"_index":38,"title":{},"body":{"guards/AdminConversationGuard.html":{},"entities/ConversationMember.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"classes/GroupMember.html":{},"miscellaneous/enumerations.html":{}}}],["membertype.admin",{"_index":61,"title":{},"body":{"guards/AdminConversationGuard.html":{},"injectables/ConversationMembersService.html":{}}}],["membertype.member",{"_index":475,"title":{},"body":{"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{}}}],["message",{"_index":500,"title":{"entities/Message.html":{}},"body":{"controllers/ConversationsController.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/LoginUserDto.html":{},"entities/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/RegisterUserDto.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["message_id",{"_index":803,"title":{},"body":{"entities/Message.html":{}}}],["messages",{"_index":812,"title":{},"body":{"controllers/MessagesController.html":{}}}],["messagescontroller",{"_index":810,"title":{"controllers/MessagesController.html":{}},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":94,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesrepository",{"_index":833,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messagesservice",{"_index":815,"title":{"injectables/MessagesService.html":{}},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["messgage.dto",{"_index":817,"title":{},"body":{"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessgageDto.html":{}}}],["messgage.dto.ts",{"_index":583,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessgageDto.html":{},"coverage.html":{}}}],["messgage.dto.ts:11",{"_index":588,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["messgage.dto.ts:7",{"_index":586,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["messgages.controller",{"_index":827,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messgages.service",{"_index":816,"title":{},"body":{"controllers/MessagesController.html":{},"modules/MessagesModule.html":{}}}],["messgages/entities/messgage.entity",{"_index":501,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["messgages/messgages.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["metadata",{"_index":1200,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/MemberConversationGuard.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":794,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["minlength(8",{"_index":796,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{}}}],["minlength(8)@maxlength(10)@isstring()@isnotempty({message",{"_index":928,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["miscellaneous",{"_index":1204,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1298,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1246,"title":{},"body":{"index.html":{}}}],["module",{"_index":77,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupMembersModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupMembersModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":79,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupMembersModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1265,"title":{},"body":{"index.html":{}}}],["multer",{"_index":853,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["multerconfigservice",{"_index":244,"title":{"injectables/MulterConfigService.html":{}},"body":{"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"injectables/MulterConfigService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["multermodule",{"_index":243,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/UsersModule.html":{}}}],["multermodule.registerasync",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/UsersModule.html":{}}}],["multermoduleoptions",{"_index":844,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["multeroptionsfactory",{"_index":851,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["mysql2",{"_index":1192,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":1313,"title":{},"body":{"index.html":{}}}],["mật",{"_index":781,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["mọi",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":20,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/MemberConversationGuard.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":1284,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1235,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1317,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":1013,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":1262,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":31,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"modules/DatabaseModule.html":{},"guards/FriendRelationshipGuard.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"injectables/GroupMembersService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/MemberConversationGuard.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":699,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":237,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1042,"title":{},"body":{"classes/UpdateRelationshipDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":241,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/MulterConfigService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"controllers/GroupMembersController.html":{},"classes/LoginUserDto.html":{},"controllers/MessagesController.html":{},"classes/RegisterUserDto.html":{},"controllers/RelationshipsController.html":{},"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":433,"title":{},"body":{"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"modules/DatabaseModule.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"modules/RelationshipsModule.html":{},"injectables/RelationshipsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/GroupMembersService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MessagesService.html":{},"injectables/RelationshipsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newregister",{"_index":1150,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["newuser.email",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.user_id",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.username",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":1022,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe",{"_index":1023,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["ng",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{}}}],["nghĩa",{"_index":736,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["nguyễn",{"_index":936,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["nguời",{"_index":934,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["người",{"_index":755,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["nh",{"_index":715,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{}}}],["node.js",{"_index":1227,"title":{},"body":{"index.html":{}}}],["noi",{"_index":910,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["notfoundexception",{"_index":465,"title":{},"body":{"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"injectables/RelationshipsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('conversation",{"_index":542,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["npm",{"_index":1240,"title":{},"body":{"index.html":{}}}],["null",{"_index":587,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["null'})@isstring()@isuuid",{"_index":597,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["null'})@isuuid",{"_index":585,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["number",{"_index":674,"title":{},"body":{"injectables/GroupMembersService.html":{},"classes/RegisterUserDto.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["nơi",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["observable",{"_index":1015,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["offer",{"_index":1295,"title":{},"body":{"index.html":{}}}],["official",{"_index":1275,"title":{},"body":{"index.html":{}}}],["ok",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["old",{"_index":566,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/UsersService.html":{}}}],["open",{"_index":1300,"title":{},"body":{"index.html":{}}}],["optional",{"_index":22,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/MemberConversationGuard.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupMembersModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1322,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1178,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":136,"title":{},"body":{"injectables/AppService.html":{}}}],["param",{"_index":657,"title":{},"body":{"controllers/GroupMembersController.html":{},"controllers/MessagesController.html":{},"controllers/RelationshipsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":666,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["parameters",{"_index":18,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/MemberConversationGuard.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parent",{"_index":873,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["parsefilepipebuilder",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["parser",{"_index":1190,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":1286,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":1036,"title":{},"body":{"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateRelationshipDto.html":{}}}],["partialtype(creategroupmemberdto",{"_index":1035,"title":{},"body":{"classes/UpdateGroupMemberDto.html":{}}}],["partialtype(createmessagedto",{"_index":1039,"title":{},"body":{"classes/UpdateMessgageDto.html":{}}}],["partialtype(createrelationshipdto",{"_index":1041,"title":{},"body":{"classes/UpdateRelationshipDto.html":{}}}],["passport",{"_index":733,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":734,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":726,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passpost/jwt.strategy",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{}}}],["passpost/local.strategy",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{}}}],["passpoststrategy",{"_index":739,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passthrough",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":394,"title":{},"body":{"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"controllers/GroupMembersController.html":{},"controllers/MessagesController.html":{},"controllers/RelationshipsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":655,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["patch('update",{"_index":385,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["patch()@responsemessage('update",{"_index":497,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["path",{"_index":854,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["path.basename(file.originalname",{"_index":899,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["path.extname(file.originalname",{"_index":895,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["path.join(this.getrootpath",{"_index":889,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["payload",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["permession",{"_index":390,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["permission",{"_index":386,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/MulterConfigService.html":{}}}],["permissionuser",{"_index":554,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["permissionuser.membertype",{"_index":555,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["pg",{"_index":1197,"title":{},"body":{"dependencies.html":{}}}],["phép",{"_index":712,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["please",{"_index":1268,"title":{},"body":{"index.html":{}}}],["port",{"_index":615,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"controllers/GroupMembersController.html":{},"controllers/MessagesController.html":{},"controllers/RelationshipsController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["post('/login",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/logout",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/logout')@responsemessage('logout",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('add",{"_index":374,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["post('follow",{"_index":968,"title":{},"body":{"controllers/RelationshipsController.html":{}}}],["post('follow')@responsemessage('create",{"_index":957,"title":{},"body":{"controllers/RelationshipsController.html":{}}}],["post('unfollow",{"_index":971,"title":{},"body":{"controllers/RelationshipsController.html":{}}}],["post('unfollow')@responsemessage('create",{"_index":961,"title":{},"body":{"controllers/RelationshipsController.html":{}}}],["post()@apibody({type",{"_index":490,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["post()@responsemessage('create",{"_index":813,"title":{},"body":{"controllers/MessagesController.html":{}}}],["postgres",{"_index":612,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["posttype",{"_index":1208,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"controllers/GroupMembersController.html":{},"controllers/MessagesController.html":{},"controllers/RelationshipsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":344,"title":{},"body":{"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/GroupMember.html":{},"entities/Message.html":{},"entities/Relationship.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":337,"title":{},"body":{"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/GroupMember.html":{},"entities/Message.html":{},"entities/Relationship.html":{},"entities/User.html":{}}}],["privacy",{"_index":905,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["privacytype",{"_index":930,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["privacytype.public",{"_index":943,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["private",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"injectables/JwtStrategy.html":{},"guards/MemberConversationGuard.html":{},"injectables/MessagesService.html":{},"injectables/RelationshipsService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["process.cwd",{"_index":855,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["processnewtoken",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["processnewtoken(refreshtoken",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["production",{"_index":1248,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1226,"title":{},"body":{"index.html":{}}}],["project",{"_index":1238,"title":{},"body":{"index.html":{}}}],["promise",{"_index":28,"title":{},"body":{"guards/AdminConversationGuard.html":{},"injectables/AuthService.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"injectables/LocalStrategy.html":{},"guards/MemberConversationGuard.html":{}}}],["properties",{"_index":325,"title":{"properties.html":{}},"body":{"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/DeleteConversationDto.html":{},"classes/GroupMember.html":{},"interfaces/IUser.html":{},"classes/LoginUserDto.html":{},"entities/Message.html":{},"injectables/MulterConfigService.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"interfaces/Response.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["protected",{"_index":1215,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["provide",{"_index":1333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provider",{"_index":1332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupMembersModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["public()@get(':user_id')@responsemessage('user",{"_index":1085,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@responsemessage('get",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@responsemessage('register",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@responsemessage('user",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["public/images/${folder",{"_index":890,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["qua",{"_index":714,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["questions",{"_index":1266,"title":{},"body":{"index.html":{}}}],["reactionposttype",{"_index":991,"title":{},"body":{"injectables/RelationshipsService.html":{},"miscellaneous/enumerations.html":{}}}],["reactiontype",{"_index":1209,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["read",{"_index":1308,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"controllers/GroupMembersController.html":{},"controllers/MessagesController.html":{},"controllers/RelationshipsController.html":{},"controllers/UsersController.html":{}}}],["real",{"_index":1281,"title":{},"body":{"index.html":{}}}],["recursive",{"_index":857,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["reflect",{"_index":1199,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":693,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["refresh",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh_token",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["register",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["register(user",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["registeruserdto",{"_index":164,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["relationship",{"_index":400,"title":{"entities/Relationship.html":{}},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationsService.html":{},"guards/FriendRelationshipGuard.html":{},"entities/Relationship.html":{},"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{},"injectables/RelationshipsService.html":{},"coverage.html":{}}}],["relationship')@apibody({type",{"_index":958,"title":{},"body":{"controllers/RelationshipsController.html":{}}}],["relationship.dto",{"_index":964,"title":{},"body":{"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"classes/UpdateRelationshipDto.html":{}}}],["relationship.dto.ts",{"_index":592,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"classes/UpdateRelationshipDto.html":{},"coverage.html":{}}}],["relationship.dto.ts:7",{"_index":598,"title":{},"body":{"classes/CreateRelationshipDto.html":{}}}],["relationship.relationship",{"_index":547,"title":{},"body":{"injectables/ConversationsService.html":{},"guards/FriendRelationshipGuard.html":{}}}],["relationship_id",{"_index":945,"title":{},"body":{"entities/Relationship.html":{}}}],["relationship_user1_user2",{"_index":998,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["relationship_user1_user2.relationship",{"_index":1006,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["relationship_user2_user1",{"_index":1000,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["relationships",{"_index":953,"title":{},"body":{"controllers/RelationshipsController.html":{}}}],["relationships.controller",{"_index":979,"title":{},"body":{"modules/RelationshipsModule.html":{}}}],["relationships.service",{"_index":963,"title":{},"body":{"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{}}}],["relationships/relationships.module",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["relationshipscontroller",{"_index":951,"title":{"controllers/RelationshipsController.html":{}},"body":{"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{},"coverage.html":{}}}],["relationshipsmodule",{"_index":95,"title":{"modules/RelationshipsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/RelationshipsModule.html":{},"modules.html":{},"overview.html":{}}}],["relationshipsrepository",{"_index":986,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["relationshipsservice",{"_index":528,"title":{"injectables/RelationshipsService.html":{}},"body":{"injectables/ConversationsService.html":{},"guards/FriendRelationshipGuard.html":{},"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{},"injectables/RelationshipsService.html":{},"coverage.html":{},"overview.html":{}}}],["relationshiptype",{"_index":537,"title":{},"body":{"injectables/ConversationsService.html":{},"guards/FriendRelationshipGuard.html":{},"entities/Relationship.html":{},"injectables/RelationshipsService.html":{},"miscellaneous/enumerations.html":{}}}],["relationshiptype.follow",{"_index":1002,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["relationshiptype.friend",{"_index":548,"title":{},"body":{"injectables/ConversationsService.html":{},"guards/FriendRelationshipGuard.html":{},"injectables/RelationshipsService.html":{}}}],["remote",{"_index":487,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["remote(@user",{"_index":511,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["remote(user",{"_index":492,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["remoteallmember",{"_index":442,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["remoteallmember(conversation_id",{"_index":458,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["remove",{"_index":644,"title":{},"body":{"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{}}}],["remove(@param('id",{"_index":668,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["remove(id",{"_index":650,"title":{},"body":{"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{}}}],["removes",{"_index":682,"title":{},"body":{"injectables/GroupMembersService.html":{}}}],["repository",{"_index":444,"title":{},"body":{"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/RelationshipsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/MulterConfigService.html":{}}}],["req?.headers?.folder_type",{"_index":886,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["request",{"_index":44,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AuthController.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"guards/MemberConversationGuard.html":{},"miscellaneous/variables.html":{}}}],["request.body",{"_index":49,"title":{},"body":{"guards/AdminConversationGuard.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"guards/MemberConversationGuard.html":{}}}],["request.cookies['refresh_token",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["request.user",{"_index":47,"title":{},"body":{"guards/AdminConversationGuard.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"guards/MemberConversationGuard.html":{},"miscellaneous/variables.html":{}}}],["requested",{"_index":867,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["res",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupMembersModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1258,"title":{},"body":{"index.html":{}}}],["response",{"_index":153,"title":{"interfaces/Response.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["response.clearcookie('refresh_token",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["response.cookie('refresh_token",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["response_message",{"_index":1019,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responsemessage",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/MessagesController.html":{},"controllers/RelationshipsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responsemessage('create",{"_index":820,"title":{},"body":{"controllers/MessagesController.html":{},"controllers/RelationshipsController.html":{}}}],["responsemessage('delete",{"_index":1097,"title":{},"body":{"controllers/UsersController.html":{}}}],["responsemessage('get",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["responsemessage('logout",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["responsemessage('register",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["responsemessage('update",{"_index":513,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["responsemessage('user",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["results",{"_index":63,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateGroupMemberDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"modules/DatabaseModule.html":{},"classes/DeleteConversationDto.html":{},"guards/FriendRelationshipGuard.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"injectables/GroupMembersService.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/MemberConversationGuard.html":{},"entities/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateRelationshipDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":53,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/MemberConversationGuard.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":27,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/MemberConversationGuard.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["roletype",{"_index":1210,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["route",{"_index":705,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["run",{"_index":1242,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1016,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1018,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["s",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["sad",{"_index":1220,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["salt",{"_index":1138,"title":{},"body":{"injectables/UsersService.html":{}}}],["same",{"_index":876,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["scalable",{"_index":1231,"title":{},"body":{"index.html":{}}}],["secret",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":754,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":1152,"title":{},"body":{"injectables/UsersService.html":{}}}],["server",{"_index":1232,"title":{},"body":{"index.html":{}}}],["setmetadata(is_public_key",{"_index":1336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(response_message",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1239,"title":{},"body":{"index.html":{}}}],["side",{"_index":1233,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{}}}],["social",{"_index":333,"title":{},"body":{"entities/Conversation.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateGroupMemberDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"modules/DatabaseModule.html":{},"classes/DeleteConversationDto.html":{},"guards/FriendRelationshipGuard.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"injectables/GroupMembersService.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/MemberConversationGuard.html":{},"entities/Message.html":{},"controllers/MessagesController.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"controllers/RelationshipsController.html":{},"modules/RelationshipsModule.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateGroupMemberDto.html":{},"classes/UpdateMessgageDto.html":{},"classes/UpdateRelationshipDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces/backend/public/images/default/avatar",{"_index":334,"title":{},"body":{"entities/Conversation.html":{}}}],["sponsors",{"_index":1303,"title":{},"body":{"index.html":{}}}],["src/.../customize.ts",{"_index":1331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.providers.ts",{"_index":1330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../helper.enum.ts",{"_index":1206,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1223,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":68,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":71,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":134,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":135,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:43",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:65",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:72",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:82",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:118",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:17",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:36",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:45",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:76",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:86",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt",{"_index":687,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/local",{"_index":760,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/passpost/jwt.strategy.ts",{"_index":725,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/passpost/jwt.strategy.ts:13",{"_index":728,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/passpost/jwt.strategy.ts:26",{"_index":730,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/passpost/local.strategy.ts",{"_index":763,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/passpost/local.strategy.ts:15",{"_index":767,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/passpost/local.strategy.ts:9",{"_index":765,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/conversation",{"_index":35,"title":{},"body":{"guards/AdminConversationGuard.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"modules/ConversationMembersModule.html":{},"injectables/ConversationMembersService.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"guards/MemberConversationGuard.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/conversations/conversations.controller.ts",{"_index":484,"title":{},"body":{"controllers/ConversationsController.html":{},"coverage.html":{}}}],["src/conversations/conversations.controller.ts:32",{"_index":491,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/conversations/conversations.controller.ts:37",{"_index":494,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/conversations/conversations.controller.ts:45",{"_index":499,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/conversations/conversations.module",{"_index":436,"title":{},"body":{"modules/ConversationMembersModule.html":{}}}],["src/conversations/conversations.module.ts",{"_index":519,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["src/conversations/conversations.service",{"_index":502,"title":{},"body":{"controllers/ConversationsController.html":{},"modules/MessagesModule.html":{}}}],["src/conversations/conversations.service.ts",{"_index":524,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{}}}],["src/conversations/conversations.service.ts:105",{"_index":536,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/conversations.service.ts:22",{"_index":529,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/conversations.service.ts:31",{"_index":534,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/conversations.service.ts:40",{"_index":532,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/conversations.service.ts:75",{"_index":535,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/conversations/dto/create",{"_index":568,"title":{},"body":{"classes/CreateConversationDto.html":{},"coverage.html":{}}}],["src/conversations/dto/delete",{"_index":625,"title":{},"body":{"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["src/conversations/dto/update",{"_index":1030,"title":{},"body":{"classes/UpdateConversationDto.html":{},"coverage.html":{}}}],["src/conversations/entities/conversation.entity.ts",{"_index":324,"title":{},"body":{"entities/Conversation.html":{},"coverage.html":{}}}],["src/conversations/entities/conversation.entity.ts:15",{"_index":336,"title":{},"body":{"entities/Conversation.html":{}}}],["src/conversations/entities/conversation.entity.ts:18",{"_index":343,"title":{},"body":{"entities/Conversation.html":{}}}],["src/conversations/entities/conversation.entity.ts:21",{"_index":342,"title":{},"body":{"entities/Conversation.html":{}}}],["src/conversations/entities/conversation.entity.ts:6",{"_index":338,"title":{},"body":{"entities/Conversation.html":{}}}],["src/conversations/entities/conversation.entity.ts:9",{"_index":340,"title":{},"body":{"entities/Conversation.html":{}}}],["src/core/multer.config",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/UsersModule.html":{}}}],["src/core/multer.config.ts",{"_index":839,"title":{},"body":{"injectables/MulterConfigService.html":{},"coverage.html":{}}}],["src/core/multer.config.ts:12",{"_index":850,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["src/core/multer.config.ts:15",{"_index":846,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["src/core/multer.config.ts:39",{"_index":843,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["src/core/transform.interceptor.ts",{"_index":1010,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/transform.interceptor.ts:21",{"_index":1027,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/transform.interceptor.ts:24",{"_index":1029,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/database/database.module",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{}}}],["src/database/database.module.ts",{"_index":608,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.providers.ts",{"_index":1168,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorator/customize",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/MessagesController.html":{},"controllers/RelationshipsController.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{}}}],["src/decorator/customize.ts",{"_index":1170,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/group",{"_index":579,"title":{},"body":{"classes/CreateGroupMemberDto.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"modules/GroupMembersModule.html":{},"injectables/GroupMembersService.html":{},"classes/UpdateGroupMemberDto.html":{},"coverage.html":{}}}],["src/guard/guard",{"_index":6,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"guards/MemberConversationGuard.html":{},"coverage.html":{}}}],["src/helper/helper.enum",{"_index":39,"title":{},"body":{"guards/AdminConversationGuard.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"guards/FriendRelationshipGuard.html":{},"classes/GroupMember.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"injectables/RelationshipsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["src/helper/helper.enum.ts",{"_index":1211,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/main.ts",{"_index":1172,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/messgages/dto/create",{"_index":582,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/messgages/dto/update",{"_index":1038,"title":{},"body":{"classes/UpdateMessgageDto.html":{},"coverage.html":{}}}],["src/messgages/entities/messgage.entity.ts",{"_index":802,"title":{},"body":{"entities/Message.html":{},"coverage.html":{}}}],["src/messgages/entities/messgage.entity.ts:12",{"_index":804,"title":{},"body":{"entities/Message.html":{}}}],["src/messgages/entities/messgage.entity.ts:15",{"_index":807,"title":{},"body":{"entities/Message.html":{}}}],["src/messgages/entities/messgage.entity.ts:18",{"_index":805,"title":{},"body":{"entities/Message.html":{}}}],["src/messgages/entities/messgage.entity.ts:6",{"_index":808,"title":{},"body":{"entities/Message.html":{}}}],["src/messgages/entities/messgage.entity.ts:9",{"_index":806,"title":{},"body":{"entities/Message.html":{}}}],["src/messgages/messgages.controller.ts",{"_index":811,"title":{},"body":{"controllers/MessagesController.html":{},"coverage.html":{}}}],["src/messgages/messgages.controller.ts:23",{"_index":814,"title":{},"body":{"controllers/MessagesController.html":{}}}],["src/messgages/messgages.module.ts",{"_index":825,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/messgages/messgages.service.ts",{"_index":829,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/messgages/messgages.service.ts:11",{"_index":832,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/messgages/messgages.service.ts:18",{"_index":834,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/relationships/dto/create",{"_index":591,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"coverage.html":{}}}],["src/relationships/dto/update",{"_index":1040,"title":{},"body":{"classes/UpdateRelationshipDto.html":{},"coverage.html":{}}}],["src/relationships/entities/relationship.entity.ts",{"_index":944,"title":{},"body":{"entities/Relationship.html":{},"coverage.html":{}}}],["src/relationships/entities/relationship.entity.ts:10",{"_index":949,"title":{},"body":{"entities/Relationship.html":{}}}],["src/relationships/entities/relationship.entity.ts:13",{"_index":950,"title":{},"body":{"entities/Relationship.html":{}}}],["src/relationships/entities/relationship.entity.ts:19",{"_index":947,"title":{},"body":{"entities/Relationship.html":{}}}],["src/relationships/entities/relationship.entity.ts:7",{"_index":948,"title":{},"body":{"entities/Relationship.html":{}}}],["src/relationships/relationships.controller.ts",{"_index":952,"title":{},"body":{"controllers/RelationshipsController.html":{},"coverage.html":{}}}],["src/relationships/relationships.controller.ts:25",{"_index":959,"title":{},"body":{"controllers/RelationshipsController.html":{}}}],["src/relationships/relationships.controller.ts:32",{"_index":962,"title":{},"body":{"controllers/RelationshipsController.html":{}}}],["src/relationships/relationships.module",{"_index":437,"title":{},"body":{"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{}}}],["src/relationships/relationships.module.ts",{"_index":978,"title":{},"body":{"modules/RelationshipsModule.html":{}}}],["src/relationships/relationships.service",{"_index":538,"title":{},"body":{"injectables/ConversationsService.html":{},"guards/FriendRelationshipGuard.html":{}}}],["src/relationships/relationships.service.ts",{"_index":982,"title":{},"body":{"injectables/RelationshipsService.html":{},"coverage.html":{}}}],["src/relationships/relationships.service.ts:19",{"_index":985,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["src/relationships/relationships.service.ts:26",{"_index":988,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["src/relationships/relationships.service.ts:35",{"_index":989,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["src/relationships/relationships.service.ts:94",{"_index":990,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["src/users/dto/create",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/users/dto/login",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1045,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["src/users/entities/user.entity.ts",{"_index":1052,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:11",{"_index":1073,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:14",{"_index":1063,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":1066,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":1059,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":1058,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":1064,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":1056,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":1062,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:37",{"_index":1070,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":1068,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:43",{"_index":1060,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:46",{"_index":1071,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:49",{"_index":1061,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:52",{"_index":1067,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:8",{"_index":1072,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1076,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:29",{"_index":1086,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:35",{"_index":1083,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:42",{"_index":1089,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.interface",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/JwtStrategy.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{}}}],["src/users/users.interface.ts",{"_index":685,"title":{},"body":{"interfaces/IUser.html":{},"coverage.html":{}}}],["src/users/users.module",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/RelationshipsModule.html":{}}}],["src/users/users.module.ts",{"_index":1105,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/users/users.service.ts",{"_index":1109,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:112",{"_index":1119,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:122",{"_index":1129,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:17",{"_index":1117,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":1131,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:29",{"_index":1126,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:33",{"_index":1132,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":1130,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:43",{"_index":1121,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:52",{"_index":1127,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:87",{"_index":1123,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1244,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1247,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1249,"title":{},"body":{"index.html":{}}}],["started",{"_index":1225,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1237,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1159,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":1054,"title":{},"body":{"entities/User.html":{}}}],["statuscode",{"_index":1012,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["statustype",{"_index":1069,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["statustype.off",{"_index":1074,"title":{},"body":{"entities/User.html":{}}}],["stay",{"_index":1289,"title":{},"body":{"index.html":{}}}],["storage",{"_index":882,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["strategy",{"_index":732,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":72,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"classes/DeleteConversationDto.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"interfaces/IUser.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"entities/Message.html":{},"injectables/MulterConfigService.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string'})@apiproperty({example",{"_index":777,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["successfully",{"_index":859,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["super",{"_index":718,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":723,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1267,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1320,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":863,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["synchronize",{"_index":623,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":745,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LoginUserDto.html":{}}}],["table",{"_index":1177,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1176,"title":{},"body":{"coverage.html":{}}}],["targetdirectory",{"_index":847,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["test",{"_index":1252,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":1255,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1254,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1250,"title":{},"body":{"index.html":{}}}],["th",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["thanks",{"_index":1302,"title":{},"body":{"index.html":{}}}],["this.appservice.home",{"_index":76,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(dto",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(response",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.processnewtoken(refreshtoken",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registeruserdto",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":772,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.checkpermission",{"_index":481,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["this.cmservice.findmember(user_id",{"_index":836,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.configservice.get('jwt_refresh_expire",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.conversationmembersrepository.delete",{"_index":476,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["this.conversationmembersrepository.findone",{"_index":469,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["this.conversationmembersrepository.save",{"_index":474,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["this.conversationmembersrepository.update",{"_index":482,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["this.conversationmembersservice.addmember",{"_index":552,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationmembersservice.addmember(dto",{"_index":412,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["this.conversationmembersservice.createadmin",{"_index":550,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationmembersservice.deleteadmin(dto",{"_index":424,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["this.conversationmembersservice.deletemember(dto",{"_index":422,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["this.conversationmembersservice.findmember",{"_index":57,"title":{},"body":{"guards/AdminConversationGuard.html":{},"injectables/ConversationsService.html":{},"guards/MemberConversationGuard.html":{}}}],["this.conversationmembersservice.remoteallmember",{"_index":556,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationmembersservice.updatepermissionadmin(dto",{"_index":415,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["this.conversationmembersservice.updatepermissionuser(dto",{"_index":420,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["this.conversationsrepository.delete",{"_index":557,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsrepository.findone",{"_index":553,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsrepository.findoneby",{"_index":541,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsrepository.save",{"_index":545,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsrepository.update",{"_index":560,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.conversationsservice.create(user",{"_index":510,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.findconversionbyid",{"_index":603,"title":{},"body":{"guards/CreatorConversationGuard.html":{}}}],["this.conversationsservice.findconversionbyid(body.conversation_id",{"_index":801,"title":{},"body":{"guards/MemberConversationGuard.html":{}}}],["this.conversationsservice.findconversionbyid(dto.conversation_id",{"_index":473,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["this.conversationsservice.remote(user",{"_index":512,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.update(dto",{"_index":514,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.createrefreshtoken(payload",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.ensureexists(`public/images/${folder",{"_index":887,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["this.findconversionbyid(dto.conversation_id",{"_index":559,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.findmember(dto.user_id",{"_index":470,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["this.findmember(user_id",{"_index":477,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["this.findrelationship",{"_index":999,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["this.finduserbyid(user.user_id",{"_index":1153,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.gethashpassword(password",{"_index":1149,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.groupmembersservice.create(creategroupmemberdto",{"_index":662,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["this.groupmembersservice.findall",{"_index":663,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["this.groupmembersservice.findone(+id",{"_index":665,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["this.groupmembersservice.remove(+id",{"_index":669,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["this.groupmembersservice.update(+id",{"_index":667,"title":{},"body":{"controllers/GroupMembersController.html":{}}}],["this.jwtservice.sign(payload",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(refreshtoken",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.messagesrepository.save",{"_index":837,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.messagesservice.create(user",{"_index":821,"title":{},"body":{"controllers/MessagesController.html":{}}}],["this.reflector.get(response_message",{"_index":1026,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":720,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.relationshipsrepository.delete",{"_index":1007,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["this.relationshipsrepository.delete(relationship_user1_user2",{"_index":1008,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["this.relationshipsrepository.findone",{"_index":995,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["this.relationshipsrepository.save",{"_index":1001,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["this.relationshipsrepository.update",{"_index":1003,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["this.relationshipsservice.findrelationship",{"_index":544,"title":{},"body":{"injectables/ConversationsService.html":{},"guards/FriendRelationshipGuard.html":{}}}],["this.relationshipsservice.follow(dto",{"_index":970,"title":{},"body":{"controllers/RelationshipsController.html":{}}}],["this.relationshipsservice.unfollow(dto",{"_index":973,"title":{},"body":{"controllers/RelationshipsController.html":{}}}],["this.usersrepository.findone",{"_index":1143,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":1146,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":1151,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update",{"_index":1142,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.deleteuser(user",{"_index":1099,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyemail(email",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.finduserbyid(user_id",{"_index":1096,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyid(user_id2",{"_index":997,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["this.usersservice.finduserbytoken(refreshtoken",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.isvalidpassword(password",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.register(user",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateprofile(updateuserdto",{"_index":1100,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateusertoken",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateusertoken(refresh_token",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser(email",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/MessagesService.html":{},"injectables/RelationshipsService.html":{},"injectables/UsersService.html":{}}}],["thành",{"_index":938,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["thông",{"_index":757,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["thực",{"_index":709,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["time",{"_index":838,"title":{},"body":{"injectables/MessagesService.html":{},"index.html":{}}}],["tin",{"_index":758,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["token",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["token')@get('/refresh",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["touch",{"_index":1310,"title":{},"body":{"index.html":{}}}],["tr",{"_index":756,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["tra",{"_index":769,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["transformer",{"_index":1186,"title":{},"body":{"dependencies.html":{}}}],["transforminterceptor",{"_index":1020,"title":{"injectables/TransformInterceptor.html":{}},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["true",{"_index":62,"title":{},"body":{"guards/AdminConversationGuard.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"injectables/JwtAuthGuard.html":{},"guards/MemberConversationGuard.html":{},"injectables/MulterConfigService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/UsersService.html":{}}}],["trying",{"_index":879,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["trên",{"_index":787,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["trích",{"_index":743,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["trống",{"_index":795,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["trống'})@apiproperty({example",{"_index":921,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["trống'})@isemail",{"_index":775,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["trống'})@isstring()@apiproperty({example",{"_index":935,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["trống'})@minlength(8",{"_index":783,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["tuấn",{"_index":937,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["twitter",{"_index":1316,"title":{},"body":{"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"guards/AdminConversationGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Conversation.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"modules/DatabaseModule.html":{},"classes/DeleteConversationDto.html":{},"guards/FriendRelationshipGuard.html":{},"classes/GroupMember.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"interfaces/IUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/MemberConversationGuard.html":{},"entities/Message.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/MulterConfigService.html":{},"classes/RegisterUserDto.html":{},"entities/Relationship.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":345,"title":{},"body":{"entities/Conversation.html":{},"entities/ConversationMember.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"classes/GroupMember.html":{},"entities/Message.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"entities/Relationship.html":{},"injectables/RelationshipsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":432,"title":{},"body":{"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([conversation",{"_index":523,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["typeormmodule.forfeature([conversationmember",{"_index":438,"title":{},"body":{"modules/ConversationMembersModule.html":{}}}],["typeormmodule.forfeature([message",{"_index":828,"title":{},"body":{"modules/MessagesModule.html":{}}}],["typeormmodule.forfeature([relationship",{"_index":981,"title":{},"body":{"modules/RelationshipsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1108,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":611,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1043,"title":{},"body":{"classes/UpdateRelationshipDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1236,"title":{},"body":{"index.html":{}}}],["tên",{"_index":933,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["tạo",{"_index":740,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["tới",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["tự'})@isstring({message",{"_index":789,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["tự'})@maxlength(10",{"_index":786,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["unauthorizedexception",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('token",{"_index":724,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["unauthorizedexception('username/password",{"_index":773,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":925,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["unfollow",{"_index":955,"title":{},"body":{"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{}}}],["unfollow(@body",{"_index":972,"title":{},"body":{"controllers/RelationshipsController.html":{}}}],["unfollow(dto",{"_index":960,"title":{},"body":{"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{}}}],["unfollowed",{"_index":1009,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["unit",{"_index":1251,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"injectables/JwtStrategy.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"injectables/RelationshipsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1328,"title":{},"body":{"properties.html":{}}}],["update",{"_index":419,"title":{},"body":{"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{}}}],["update(dto",{"_index":495,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["update(id",{"_index":653,"title":{},"body":{"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{}}}],["updateconversationdto",{"_index":496,"title":{"classes/UpdateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/UpdateConversationDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":1055,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["updategroupmemberdto",{"_index":654,"title":{"classes/UpdateGroupMemberDto.html":{}},"body":{"controllers/GroupMembersController.html":{},"injectables/GroupMembersService.html":{},"classes/UpdateGroupMemberDto.html":{},"coverage.html":{}}}],["updatemessgagedto",{"_index":1037,"title":{"classes/UpdateMessgageDto.html":{}},"body":{"classes/UpdateMessgageDto.html":{},"coverage.html":{}}}],["updatepermissionadmin",{"_index":371,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{}}}],["updatepermissionadmin(@body",{"_index":414,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["updatepermissionadmin(dto",{"_index":384,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{}}}],["updatepermissionuser",{"_index":372,"title":{},"body":{"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{}}}],["updatepermissionuser(dto",{"_index":461,"title":{},"body":{"injectables/ConversationMembersService.html":{}}}],["updatepermissionuser(user",{"_index":389,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["updateprofile",{"_index":1115,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateprofile(dto",{"_index":1128,"title":{},"body":{"injectables/UsersService.html":{}}}],["updaterelationshipdto",{"_index":965,"title":{"classes/UpdateRelationshipDto.html":{}},"body":{"controllers/RelationshipsController.html":{},"classes/UpdateRelationshipDto.html":{},"coverage.html":{}}}],["updates",{"_index":681,"title":{},"body":{"injectables/GroupMembersService.html":{},"index.html":{}}}],["updateuser",{"_index":1080,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(updateuserdto",{"_index":1087,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":1044,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusertoken",{"_index":1112,"title":{},"body":{"injectables/UsersService.html":{}}}],["uploadedfile",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["useclass",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/UsersModule.html":{}}}],["usefactory",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":393,"title":{},"body":{"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{}}}],["useguards(adminconversationguard",{"_index":413,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["useguards(creatorconversationguard",{"_index":416,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["useguards(friendrelationshipguard",{"_index":409,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["useguards(memberconversationguard",{"_index":410,"title":{},"body":{"controllers/ConversationMembersController.html":{},"controllers/ConversationsController.html":{}}}],["useinterceptors",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('avatar",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":46,"title":{"entities/User.html":{}},"body":{"guards/AdminConversationGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationMembersService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/MemberConversationGuard.html":{},"controllers/MessagesController.html":{},"injectables/MessagesService.html":{},"controllers/RelationshipsController.html":{},"injectables/RelationshipsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user')@post('/register')@useinterceptors(undefined)@apibody({type",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["user')@useguards(creatorconversationguard",{"_index":391,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["user')@useinterceptors(undefined",{"_index":1088,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.deletedat",{"_index":1144,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":774,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":780,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:17",{"_index":939,"title":{},"body":{"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:21",{"_index":1047,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:22",{"_index":791,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:23",{"_index":923,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:25",{"_index":1049,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:29",{"_index":1046,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:30",{"_index":929,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:33",{"_index":1048,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:34",{"_index":915,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:37",{"_index":1050,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:38",{"_index":927,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:42",{"_index":912,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:46",{"_index":919,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:50",{"_index":932,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.password",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.user_id",{"_index":58,"title":{},"body":{"guards/AdminConversationGuard.html":{},"injectables/AuthService.html":{},"controllers/ConversationMembersController.html":{},"injectables/ConversationsService.html":{},"guards/CreatorConversationGuard.html":{},"guards/FriendRelationshipGuard.html":{},"guards/MemberConversationGuard.html":{},"injectables/MessagesService.html":{},"injectables/RelationshipsService.html":{},"injectables/UsersService.html":{}}}],["user1@gmail.com",{"_index":778,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user2",{"_index":996,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["user@gmail.com",{"_index":922,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user_id",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"entities/ConversationMember.html":{},"classes/ConversationMemberDto.html":{},"injectables/ConversationMembersService.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/GroupMember.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"injectables/MessagesService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user_id1",{"_index":946,"title":{},"body":{"entities/Relationship.html":{},"injectables/RelationshipsService.html":{}}}],["user_id2",{"_index":593,"title":{},"body":{"classes/CreateRelationshipDto.html":{},"entities/Relationship.html":{},"injectables/RelationshipsService.html":{}}}],["userdb",{"_index":1145,"title":{},"body":{"injectables/UsersService.html":{}}}],["useremail",{"_index":1122,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"interfaces/IUser.html":{},"injectables/JwtStrategy.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["username'})@isoptional",{"_index":1051,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["users",{"_index":1077,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1106,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.interface",{"_index":1091,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":1090,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":992,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["users/users.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":993,"title":{},"body":{"injectables/RelationshipsService.html":{}}}],["userscontroller",{"_index":1075,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":96,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1118,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":263,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/RelationshipsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":1282,"title":{},"body":{"index.html":{}}}],["v",{"_index":703,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{}}}],["validate",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":766,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":729,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["validationpipe",{"_index":396,"title":{},"body":{"controllers/ConversationMembersController.html":{}}}],["validator",{"_index":34,"title":{},"body":{"guards/AdminConversationGuard.html":{},"classes/ConversationMemberDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreateRelationshipDto.html":{},"guards/CreatorConversationGuard.html":{},"classes/DeleteConversationDto.html":{},"guards/FriendRelationshipGuard.html":{},"classes/LoginUserDto.html":{},"guards/MemberConversationGuard.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"dependencies.html":{}}}],["value",{"_index":849,"title":{},"body":{"injectables/MulterConfigService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1169,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1329,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1326,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1214,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["visit",{"_index":1263,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1277,"title":{},"body":{"index.html":{}}}],["void",{"_index":848,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["watch",{"_index":1245,"title":{},"body":{"index.html":{}}}],["website",{"_index":1314,"title":{},"body":{"index.html":{}}}],["without",{"_index":897,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["working",{"_index":1261,"title":{},"body":{"index.html":{}}}],["wow",{"_index":1219,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["x",{"_index":1291,"title":{},"body":{"index.html":{}}}],["xuất",{"_index":744,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["xác",{"_index":708,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["you'd",{"_index":1306,"title":{},"body":{"index.html":{}}}],["you're",{"_index":878,"title":{},"body":{"injectables/MulterConfigService.html":{}}}],["yêu",{"_index":706,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["zoom",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationMembersModule.html":{},"modules/ConversationsModule.html":{},"modules/DatabaseModule.html":{},"modules/GroupMembersModule.html":{},"modules/MessagesModule.html":{},"modules/RelationshipsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AdminConversationGuard.html":{"url":"guards/AdminConversationGuard.html","title":"guard - AdminConversationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AdminConversationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guard/guard-conversation-admin.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(conversationMembersService: ConversationMembersService)\n                    \n                \n                        \n                            \n                                Defined in src/guard/guard-conversation-admin.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        conversationMembersService\n                                                  \n                                                        \n                                                                        ConversationMembersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guard/guard-conversation-admin.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { isUUID } from 'class-validator';\nimport { ConversationMembersService } from 'src/conversation-members/conversation-members.service';\nimport { MemberType } from 'src/helper/helper.enum';\n\n@Injectable()\nexport class AdminConversationGuard implements CanActivate {\n  constructor(private conversationMembersService: ConversationMembersService) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n\n    const user = request.user;\n    const body = request.body;\n\n    if (!isUUID(body.conversation_id, '4') || !isUUID(user.user_id, '4')) {\n      return false;\n    }\n\n    const findMember = await this.conversationMembersService.findMember(\n      user.user_id,\n      body.conversation_id,\n    );\n\n    if (findMember)\n      return findMember.memberType == MemberType.ADMIN ? true : false;\n    return false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                home\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        home\n                        \n                    \n                \n            \n            \n                \n                        \n                    home()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  home(): string {\n    return this.appService.home();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConversationMembersModule\n\nConversationMembersModule\n\nAppModule -->\n\nConversationMembersModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nGroupMembersModule\n\nGroupMembersModule\n\nAppModule -->\n\nGroupMembersModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nRelationshipsModule\n\nRelationshipsModule\n\nAppModule -->\n\nRelationshipsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConversationMembersModule\n                        \n                        \n                            ConversationsModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            GroupMembersModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            RelationshipsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MessagesModule } from './messgages/messgages.module';\nimport { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { AuthModule } from './auth/auth.module';\n\nimport { RelationshipsModule } from './relationships/relationships.module';\nimport { ConversationsModule } from './conversations/conversations.module';\nimport { ConversationMembersModule } from './conversation-members/conversation-members.module';\nimport { GroupMembersModule } from './group-members/group-members.module';\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true, // Để module config có thể sử dụng ở mọi nơi mà không cần import lại\n      envFilePath: '.env', // Đường dẫn tới file .env\n    }),\n    DatabaseModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    UsersModule,\n    AuthModule,\n    RelationshipsModule,\n    MessagesModule,\n    ConversationsModule,\n    ConversationMembersModule,\n    GroupMembersModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                home\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        home\n                        \n                    \n                \n            \n            \n                \nhome()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n\thome(): string {\n\t\treturn 'Home page!';\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                handleGetAccount\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                handleLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                handleRefreshToken\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                handleRegister\n                            \n                            \n                                    \n                                    \n                                hendleLogout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        handleGetAccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleGetAccount(user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/account')@ResponseMessage('Get user information')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IUser\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        handleLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleLogin(dto: LoginUserDto, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ResponseMessage('User login')@Post('/login')@ApiBody({type: LoginUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        handleRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleRefreshToken(request: Request, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ResponseMessage('Get user by refresh token')@Get('/refresh')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        handleRegister\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleRegister(registerUserDto: RegisterUserDto, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@ResponseMessage('Register a new user')@Post('/register')@UseInterceptors(undefined)@ApiBody({type: RegisterUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        hendleLogout\n                        \n                    \n                \n            \n            \n                \n                        \n                    hendleLogout(response: Response, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/logout')@ResponseMessage('Logout user')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpStatus,\n  ParseFilePipeBuilder,\n  Post,\n  Req,\n  Res,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { Public, ResponseMessage, User } from 'src/decorator/customize';\nimport { RegisterUserDto } from 'src/users/dto/create-user.dto';\nimport { Request, Response } from 'express';\nimport { IUser } from 'src/users/users.interface';\nimport { LoginUserDto } from 'src/users/dto/login-user.dto';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\nimport { FileInterceptor } from '@nestjs/platform-express';\n\n@ApiTags('Auth')\n@Controller('/auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Public()\n  @ResponseMessage('User login')\n  @Post('/login')\n  @ApiBody({ type: LoginUserDto })\n  handleLogin(\n    @Body() dto: LoginUserDto,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    return this.authService.login(dto, response);\n  }\n\n  @Public()\n  @ResponseMessage('Register a new user')\n  @Post('/register')\n  @UseInterceptors(FileInterceptor('avatar-user'))\n  @ApiBody({ type: RegisterUserDto })\n  handleRegister(\n    @Body() registerUserDto: RegisterUserDto,\n    @UploadedFile(\n      new ParseFilePipeBuilder()\n        .addFileTypeValidator({\n          fileType: /(jpg|jpeg|png|gif)$/,\n        })\n        .addMaxSizeValidator({\n          maxSize: 1000 * 1024,\n        })\n        .build({\n          errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY,\n          fileIsRequired: false,\n        }),\n    )\n    file: Express.Multer.File,\n  ) {\n    return this.authService.register(registerUserDto, file);\n  }\n\n  @Get('/account')\n  @ResponseMessage('Get user information')\n  handleGetAccount(@User() user: IUser) {\n    return user;\n  }\n\n  @Public()\n  @ResponseMessage('Get user by refresh token')\n  @Get('/refresh')\n  handleRefreshToken(\n    @Req() request: Request,\n    @Res({ passthrough: true }) response: Response,\n  ) {\n    const refreshToken = request.cookies['refresh_token'];\n    return this.authService.processNewToken(refreshToken, response);\n  }\n\n  @Post('/logout')\n  @ResponseMessage('Logout user')\n  hendleLogout(\n    @Res({ passthrough: true }) response: Response,\n    @User() user: IUser,\n  ) {\n    return this.authService.logout(response, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { LocalStrategy } from './passpost/local.strategy';\nimport { JwtStrategy } from './passpost/jwt.strategy';\nimport { PassportModule } from '@nestjs/passport';\n\nimport { AuthController } from './auth.controller';\nimport { MulterModule } from '@nestjs/platform-express';\nimport { MulterConfigService } from 'src/core/multer.config';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('JWT_ACCESS_EXPIRE'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n    MulterModule.registerAsync({\n      useClass: MulterConfigService,\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createRefreshToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                processNewToken\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createRefreshToken\n                        \n                    \n                \n            \n            \n                \ncreateRefreshToken(payload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginUserDto: LoginUserDto, response: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginUserDto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(response: Response, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        processNewToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    processNewToken(refreshToken: string, response: Response)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                response\n                                            \n                                                            Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(user: RegisterUserDto, file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config';\nimport {\n  BadRequestException,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { RegisterUserDto } from 'src/users/dto/create-user.dto';\n\nimport { UsersService } from 'src/users/users.service';\nimport { Response } from 'express';\nimport { IUser } from 'src/users/users.interface';\nimport { LoginUserDto } from 'src/users/dto/login-user.dto';\nimport { User } from 'src/users/entities/user.entity';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n    private configService: ConfigService,\n  ) {}\n\n  // Validate user\n  async validateUser(email: string, password: string): Promise {\n    const user = await this.usersService.findUserByEmail(email);\n    if (\n      !user ||\n      !(await this.usersService.isValidPassword(password, user.password))\n    ) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n    return user;\n  }\n\n  createRefreshToken(payload) {\n    const refresh_token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      expiresIn: this.configService.get('JWT_REFRESH_EXPIRE'),\n    });\n\n    return refresh_token;\n  }\n\n  async login(loginUserDto: LoginUserDto, response: Response) {\n    const { email, password } = loginUserDto;\n    const user = await this.validateUser(email, password);\n    const { user_id, username } = user;\n\n    const payload = {\n      user_id,\n      username,\n      email,\n    };\n\n    const refresh_token = this.createRefreshToken(payload);\n\n    await this.usersService.updateUserToken(refresh_token, user_id);\n\n    response.cookie('refresh_token', refresh_token, {\n      httpOnly: true,\n      maxAge: +this.configService.get('JWT_REFRESH_EXPIRE'),\n    });\n\n    return {\n      access_token: this.jwtService.sign(payload),\n      user: {\n        user_id,\n        username,\n        email,\n      },\n    };\n  }\n\n  // Register user\n  async register(user: RegisterUserDto, file: Express.Multer.File) {\n    const newUser = await this.usersService.register(user, file);\n\n    return {\n      user_id: newUser.user_id,\n      username: newUser.username,\n      email: newUser.email,\n    };\n  }\n\n  async processNewToken(refreshToken: string, response: Response) {\n    try {\n      this.jwtService.verify(refreshToken, {\n        secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      });\n\n      let user = await this.usersService.findUserByToken(refreshToken);\n\n      if (user) {\n        const { username, user_id, email } = user;\n        const payload = {\n          user_id,\n          username,\n          email,\n        };\n\n        return {\n          access_token: this.jwtService.sign(payload),\n          user: {\n            user_id,\n            username,\n            email,\n          },\n        };\n      } else {\n        throw new BadRequestException('Refresh invalid');\n      }\n    } catch (error) {\n      throw new BadRequestException('Refresh invalid');\n    }\n  }\n\n  async logout(response: Response, user: IUser) {\n    await this.usersService.updateUserToken('', user.user_id);\n    response.clearCookie('refresh_token');\n    return 'OK';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Conversation.html":{"url":"entities/Conversation.html","title":"entity - Conversation","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Conversation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/entities/conversation.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                avatar\n                            \n                            \n                                    \n                                conversation_id\n                            \n                            \n                                    \n                                conversationName\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: 'C:Codeproject-social-spaces/backend/public/images/default/avatar-conversation.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/entities/conversation.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        conversation_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/entities/conversation.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        conversationName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/entities/conversation.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/entities/conversation.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/entities/conversation.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Conversation {\n  @PrimaryGeneratedColumn('uuid')\n  conversation_id: string;\n\n  @Column()\n  conversationName: string;\n\n  @Column({\n    default:\n      'C:Codeproject-social-spaces/backend/public/images/default/avatar-conversation.jpg',\n  })\n  avatar: string;\n\n  @Column()\n  createdBy: string;\n\n  @Column()\n  createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ConversationMember.html":{"url":"entities/ConversationMember.html","title":"entity - ConversationMember","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ConversationMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversation-members/entities/conversation-member.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                conversation_id\n                            \n                            \n                                    \n                                conversationMember_id\n                            \n                            \n                                    \n                                memberType\n                            \n                            \n                                    \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        conversation_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversation-members/entities/conversation-member.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        conversationMember_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversation-members/entities/conversation-member.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        memberType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MemberType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: MemberType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversation-members/entities/conversation-member.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversation-members/entities/conversation-member.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { MemberType } from './../../helper/helper.enum';\nimport { Column, Entity, Generated, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class ConversationMember {\n  @PrimaryGeneratedColumn('uuid')\n  conversationMember_id: string;\n\n  @Column()\n  conversation_id: string;\n\n  @Column()\n  user_id: string;\n\n  @Column({ type: 'enum', enum: MemberType })\n  memberType: MemberType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConversationMemberDto.html":{"url":"classes/ConversationMemberDto.html","title":"class - ConversationMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConversationMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversation-members/dto/conversation-member.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                conversation_id\n                            \n                            \n                                    \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        conversation_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversation-members/dto/conversation-member.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversation-members/dto/conversation-member.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsUUID } from 'class-validator';\n\nexport class ConversationMemberDto {\n  @IsUUID()\n  conversation_id: string;\n\n  @IsUUID()\n  user_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConversationMembersController.html":{"url":"controllers/ConversationMembersController.html","title":"controller - ConversationMembersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConversationMembersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversation-members/conversation-members.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                conversation-members\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                addMember\n                            \n                            \n                                    \n                                    \n                                deleteAdmin\n                            \n                            \n                                    \n                                    \n                                deleteMember\n                            \n                            \n                                    \n                                    \n                                updatePermissionAdmin\n                            \n                            \n                                    \n                                    \n                                updatePermissionUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(dto: ConversationMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('add-member')@UseGuards(MemberConversationGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/conversation-members/conversation-members.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ConversationMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deleteAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAdmin(user: IUser, dto: ConversationMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete-admin')@UseGuards(CreatorConversationGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/conversation-members/conversation-members.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            ConversationMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deleteMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMember(dto: ConversationMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete-member')@UseGuards(AdminConversationGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/conversation-members/conversation-members.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ConversationMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatePermissionAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePermissionAdmin(dto: ConversationMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update-permission-admin')@UseGuards(AdminConversationGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/conversation-members/conversation-members.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ConversationMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatePermissionUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePermissionUser(user: IUser, dto: ConversationMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update-permession-user')@UseGuards(CreatorConversationGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/conversation-members/conversation-members.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            ConversationMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  UseGuards,\n  Patch,\n  Delete,\n  ValidationPipe,\n  BadRequestException,\n} from '@nestjs/common';\nimport { ConversationMembersService } from './conversation-members.service';\nimport { ApiTags } from '@nestjs/swagger';\nimport { MemberConversationGuard } from 'src/guard/guard-conversation-member';\nimport { FriendRelationshipGuard } from 'src/guard/guard-relationship-friend';\nimport { AdminConversationGuard } from 'src/guard/guard-conversation-admin';\nimport { ConversationMemberDto } from './dto/conversation-member.dto';\nimport { CreatorConversationGuard } from 'src/guard/guard-conversation-creator';\nimport { IUser } from 'src/users/users.interface';\nimport { User } from 'src/decorator/customize';\n\n@ApiTags('Conversation members')\n@Controller('conversation-members')\nexport class ConversationMembersController {\n  constructor(\n    private readonly conversationMembersService: ConversationMembersService,\n  ) {}\n\n  @Post('add-member')\n  // @UseGuards(FriendRelationshipGuard)\n  @UseGuards(MemberConversationGuard)\n  addMember(@Body() dto: ConversationMemberDto) {\n    return this.conversationMembersService.addMember(dto);\n  }\n\n  @Patch('update-permission-admin')\n  @UseGuards(AdminConversationGuard)\n  updatePermissionAdmin(@Body() dto: ConversationMemberDto) {\n    return this.conversationMembersService.updatePermissionAdmin(dto);\n  }\n\n  @Patch('update-permession-user')\n  @UseGuards(CreatorConversationGuard)\n  updatePermissionUser(\n    @User() user: IUser,\n    @Body() dto: ConversationMemberDto,\n  ) {\n    if (user.user_id == dto.user_id)\n      throw new BadRequestException('Cannot be update permission creator');\n    return this.conversationMembersService.updatePermissionUser(dto);\n  }\n\n  @Delete('delete-member')\n  @UseGuards(AdminConversationGuard)\n  deleteMember(@Body() dto: ConversationMemberDto) {\n    return this.conversationMembersService.deleteMember(dto);\n  }\n\n  @Delete('delete-admin')\n  @UseGuards(CreatorConversationGuard)\n  deleteAdmin(@User() user: IUser, @Body() dto: ConversationMemberDto) {\n    if (user.user_id == dto.user_id)\n      throw new BadRequestException('Cannot be delete creator');\n    return this.conversationMembersService.deleteAdmin(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConversationMembersModule.html":{"url":"modules/ConversationMembersModule.html","title":"module - ConversationMembersModule","body":"\n                   \n\n\n\n\n    Modules\n    ConversationMembersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConversationMembersModule\n\n\n\ncluster_ConversationMembersModule_providers\n\n\n\ncluster_ConversationMembersModule_imports\n\n\n\ncluster_ConversationMembersModule_exports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nConversationMembersModule\n\nConversationMembersModule\n\nConversationMembersModule -->\n\nDatabaseModule->ConversationMembersModule\n\n\n\n\n\nRelationshipsModule\n\nRelationshipsModule\n\nConversationMembersModule -->\n\nRelationshipsModule->ConversationMembersModule\n\n\n\n\n\nConversationMembersService \n\nConversationMembersService \n\nConversationMembersService  -->\n\nConversationMembersModule->ConversationMembersService \n\n\n\n\n\nConversationMembersService\n\nConversationMembersService\n\nConversationMembersModule -->\n\nConversationMembersService->ConversationMembersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/conversation-members/conversation-members.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConversationMembersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConversationMembersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            RelationshipsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConversationMembersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { ConversationMembersService } from './conversation-members.service';\nimport { ConversationMembersController } from './conversation-members.controller';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConversationMember } from './entities/conversation-member.entity';\nimport { ConversationsModule } from 'src/conversations/conversations.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { RelationshipsModule } from 'src/relationships/relationships.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([ConversationMember]),\n    DatabaseModule,\n    RelationshipsModule,\n    forwardRef(() => ConversationsModule),\n  ],\n  controllers: [ConversationMembersController],\n  providers: [ConversationMembersService],\n  exports: [ConversationMembersService],\n})\nexport class ConversationMembersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationMembersService.html":{"url":"injectables/ConversationMembersService.html","title":"injectable - ConversationMembersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationMembersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversation-members/conversation-members.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMember\n                            \n                            \n                                    Async\n                                checkPermission\n                            \n                            \n                                    Async\n                                createAdmin\n                            \n                            \n                                    Async\n                                deleteAdmin\n                            \n                            \n                                    Async\n                                deleteMember\n                            \n                            \n                                findMember\n                            \n                            \n                                remoteAllMember\n                            \n                            \n                                    Async\n                                updatePermissionAdmin\n                            \n                            \n                                    Async\n                                updatePermissionUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(conversationMembersRepository: Repository, conversationsService: ConversationsService)\n                    \n                \n                        \n                            \n                                Defined in src/conversation-members/conversation-members.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        conversationMembersRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        conversationsService\n                                                  \n                                                        \n                                                                        ConversationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMember(dto: ConversationMemberDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/conversation-members/conversation-members.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ConversationMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkPermission\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkPermission(user_id: string, conversation_id: string, memberType: MemberType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/conversation-members/conversation-members.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                conversation_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                memberType\n                                            \n                                                            MemberType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAdmin(dto: ConversationMemberDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/conversation-members/conversation-members.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ConversationMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteAdmin(dto: ConversationMemberDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/conversation-members/conversation-members.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ConversationMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteMember\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteMember(dto: ConversationMemberDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/conversation-members/conversation-members.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ConversationMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findMember\n                        \n                    \n                \n            \n            \n                \nfindMember(user_id: string, conversation_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/conversation-members/conversation-members.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                conversation_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remoteAllMember\n                        \n                    \n                \n            \n            \n                \nremoteAllMember(conversation_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/conversation-members/conversation-members.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                conversation_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePermissionAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePermissionAdmin(dto: ConversationMemberDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/conversation-members/conversation-members.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ConversationMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePermissionUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePermissionUser(dto: ConversationMemberDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/conversation-members/conversation-members.service.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            ConversationMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { IUser } from 'src/users/users.interface';\nimport { ConversationsService } from './../conversations/conversations.service';\nimport {\n  BadRequestException,\n  ForbiddenException,\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ConversationMember } from './entities/conversation-member.entity';\nimport { MemberType } from 'src/helper/helper.enum';\nimport { ConversationMemberDto } from './dto/conversation-member.dto';\n\n@Injectable()\nexport class ConversationMembersService {\n  constructor(\n    @InjectRepository(ConversationMember)\n    private conversationMembersRepository: Repository,\n    @Inject(forwardRef(() => ConversationsService))\n    private conversationsService: ConversationsService,\n  ) {}\n\n  findMember(user_id: string, conversation_id: string) {\n    return this.conversationMembersRepository.findOne({\n      where: {\n        user_id: user_id,\n        conversation_id: conversation_id,\n      },\n    });\n  }\n\n  async addMember(dto: ConversationMemberDto) {\n    const member = await this.findMember(dto.user_id, dto.conversation_id);\n    if (member)\n      throw new BadRequestException(\n        `${dto.user_id} existes in ${dto.conversation_id}`,\n      );\n\n    await this.conversationsService.findConversionById(dto.conversation_id);\n\n    return this.conversationMembersRepository.save({\n      conversation_id: dto.conversation_id,\n      user_id: dto.user_id,\n      memberType: MemberType.MEMBER,\n    });\n  }\n\n  async createAdmin(dto: ConversationMemberDto) {\n    await this.conversationsService.findConversionById(dto.conversation_id);\n\n    return this.conversationMembersRepository.save({\n      conversation_id: dto.conversation_id,\n      user_id: dto.user_id,\n      memberType: MemberType.ADMIN,\n    });\n  }\n\n  remoteAllMember(conversation_id: string) {\n    return this.conversationMembersRepository.delete({ conversation_id });\n  }\n\n  async checkPermission(\n    user_id: string,\n    conversation_id: string,\n    memberType: MemberType,\n  ) {\n    const conversationMember = await this.findMember(user_id, conversation_id);\n\n    if (!conversationMember)\n      throw new NotFoundException(\n        `User ${user_id} isn't conversation member ${conversation_id}`,\n      );\n    else if (conversationMember.memberType == memberType)\n      return conversationMember;\n    else throw new ForbiddenException(`User isn't ${memberType}`);\n  }\n\n  async deleteMember(dto: ConversationMemberDto) {\n    await this.checkPermission(\n      dto.user_id,\n      dto.conversation_id,\n      MemberType.MEMBER,\n    );\n    return await this.conversationMembersRepository.delete({\n      user_id: dto.user_id,\n      conversation_id: dto.conversation_id,\n    });\n  }\n\n  async deleteAdmin(dto: ConversationMemberDto) {\n    await this.checkPermission(\n      dto.user_id,\n      dto.conversation_id,\n      MemberType.ADMIN,\n    );\n    return await this.conversationMembersRepository.delete({\n      user_id: dto.user_id,\n      conversation_id: dto.conversation_id,\n    });\n  }\n\n  async updatePermissionAdmin(dto: ConversationMemberDto) {\n    await this.checkPermission(\n      dto.user_id,\n      dto.conversation_id,\n      MemberType.MEMBER,\n    );\n\n    return await this.conversationMembersRepository.update(\n      { conversation_id: dto.conversation_id, user_id: dto.user_id },\n      { memberType: MemberType.ADMIN },\n    );\n  }\n\n  async updatePermissionUser(dto: ConversationMemberDto) {\n    await this.checkPermission(\n      dto.user_id,\n      dto.conversation_id,\n      MemberType.ADMIN,\n    );\n    return await this.conversationMembersRepository.update(\n      { conversation_id: dto.conversation_id, user_id: dto.user_id },\n      { memberType: MemberType.MEMBER },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConversationsController.html":{"url":"controllers/ConversationsController.html","title":"controller - ConversationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConversationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/conversations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                conversations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                creare\n                            \n                            \n                                    \n                                remote\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        creare\n                        \n                    \n                \n            \n            \n                \n                        \n                    creare(user: IUser, dto: CreateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBody({type: CreateConversationDto})\n                \n            \n\n                    \n                        \n                            Defined in src/conversations/conversations.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateConversationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remote\n                        \n                    \n                \n            \n            \n                \n                        \n                    remote(user: IUser, dto: DeleteConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/conversations/conversations.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            DeleteConversationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(dto: UpdateConversationDto, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ResponseMessage('Update conversation')@UseGuards(MemberConversationGuard)@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/conversations/conversations.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UpdateConversationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Message } from './../messgages/entities/messgage.entity';\nimport { ConversationsService } from 'src/conversations/conversations.service';\nimport {\n  Controller,\n  Post,\n  Body,\n  Patch,\n  Delete,\n  UseInterceptors,\n  UploadedFile,\n  ParseFilePipeBuilder,\n  HttpStatus,\n  UseGuards,\n} from '@nestjs/common';\nimport { IUser } from 'src/users/users.interface';\nimport { ResponseMessage, User } from 'src/decorator/customize';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\nimport { CreateConversationDto } from './dto/create-conversation.dto';\n\nimport { UpdateConversationDto } from './dto/update-conversation.dto';\nimport { DeleteConversationDto } from './dto/delete-conversation.dto';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { MemberConversationGuard } from 'src/guard/guard-conversation-member';\n\n@ApiTags('Conversations')\n@Controller('conversations')\nexport class ConversationsController {\n  constructor(private readonly conversationsService: ConversationsService) {}\n\n  @Post()\n  @ApiBody({ type: CreateConversationDto })\n  creare(@User() user: IUser, @Body() dto: CreateConversationDto) {\n    return this.conversationsService.create(user, dto);\n  }\n\n  @Delete()\n  remote(@User() user: IUser, @Body() dto: DeleteConversationDto) {\n    return this.conversationsService.remote(user, dto);\n  }\n\n  @Patch()\n  @ResponseMessage('Update conversation')\n  @UseGuards(MemberConversationGuard)\n  @UseInterceptors(FileInterceptor('avatar-conversation'))\n  update(\n    @Body() dto: UpdateConversationDto,\n    @UploadedFile(\n      new ParseFilePipeBuilder()\n        .addFileTypeValidator({\n          fileType: /(jpg|jpeg|png|gif)$/,\n        })\n        .addMaxSizeValidator({\n          maxSize: 1000 * 1024,\n        })\n        .build({\n          errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY,\n          fileIsRequired: false,\n        }),\n    )\n    file: Express.Multer.File,\n  ) {\n    return this.conversationsService.update(dto, file);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConversationsModule.html":{"url":"modules/ConversationsModule.html","title":"module - ConversationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConversationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_exports\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_ConversationsModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nDatabaseModule->ConversationsModule\n\n\n\n\n\nRelationshipsModule\n\nRelationshipsModule\n\nConversationsModule -->\n\nRelationshipsModule->ConversationsModule\n\n\n\n\n\nConversationsService \n\nConversationsService \n\nConversationsService  -->\n\nConversationsModule->ConversationsService \n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/conversations/conversations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConversationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConversationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            RelationshipsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ConversationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { ConversationsService } from './conversations.service';\nimport { ConversationsController } from './conversations.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { Conversation } from './entities/conversation.entity';\nimport { ConversationMembersModule } from 'src/conversation-members/conversation-members.module';\nimport { RelationshipsModule } from 'src/relationships/relationships.module';\n\nimport { MulterModule } from '@nestjs/platform-express';\nimport { MulterConfigService } from 'src/core/multer.config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Conversation]),\n    DatabaseModule,\n    forwardRef(() => ConversationMembersModule),\n    RelationshipsModule,\n    MulterModule.registerAsync({\n      useClass: MulterConfigService,\n    }),\n  ],\n  controllers: [ConversationsController],\n  providers: [ConversationsService],\n  exports: [ConversationsService],\n})\nexport class ConversationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsService.html":{"url":"injectables/ConversationsService.html","title":"injectable - ConversationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/conversations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findConversionById\n                            \n                            \n                                    Async\n                                remote\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(conversationsRepository: Repository, conversationMembersService: ConversationMembersService, relationshipsService: RelationshipsService)\n                    \n                \n                        \n                            \n                                Defined in src/conversations/conversations.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        conversationsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        conversationMembersService\n                                                  \n                                                        \n                                                                        ConversationMembersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        relationshipsService\n                                                  \n                                                        \n                                                                        RelationshipsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: IUser, dto: CreateConversationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/conversations/conversations.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateConversationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findConversionById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findConversionById(conversation_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/conversations/conversations.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                conversation_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remote\n                        \n                    \n                \n            \n            \n                \n                        \n                    remote(user: IUser, dto: DeleteConversationDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/conversations/conversations.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            DeleteConversationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(dto: UpdateConversationDto, file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/conversations/conversations.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UpdateConversationDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { CreateConversationDto } from './dto/create-conversation.dto';\nimport { UpdateConversationDto } from './dto/update-conversation.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Conversation } from './entities/conversation.entity';\nimport { IUser } from 'src/users/users.interface';\nimport { ConversationMembersService } from 'src/conversation-members/conversation-members.service';\nimport { DeleteConversationDto } from './dto/delete-conversation.dto';\nimport { MemberType, RelationshipType } from 'src/helper/helper.enum';\nimport { RelationshipsService } from 'src/relationships/relationships.service';\nimport * as fs from 'fs';\n\n@Injectable()\nexport class ConversationsService {\n  constructor(\n    @InjectRepository(Conversation)\n    private conversationsRepository: Repository,\n    @Inject(forwardRef(() => ConversationMembersService))\n    private conversationMembersService: ConversationMembersService,\n    private relationshipsService: RelationshipsService,\n  ) {}\n\n  async findConversionById(conversation_id: string) {\n    const conversation = await this.conversationsRepository.findOneBy({\n      conversation_id,\n    });\n\n    if (conversation) return conversation;\n    throw new NotFoundException('Conversation not found');\n  }\n\n  async create(user: IUser, dto: CreateConversationDto) {\n    const relationship = await this.relationshipsService.findRelationship(\n      user.user_id,\n      dto.user_id,\n    );\n    if (!relationship)\n      throw new BadRequestException(\n        `${user.user_id} and ${dto.user_id} not relationship`,\n      );\n\n    const conversation = await this.conversationsRepository.save({\n      conversationName: dto.conversationName,\n      createdBy: user.user_id,\n      createdAt: new Date(),\n    });\n\n    if (relationship.relationship == RelationshipType.FRIEND) {\n      // add admin\n      await this.conversationMembersService.createAdmin({\n        conversation_id: conversation.conversation_id,\n        user_id: user.user_id,\n      });\n      // add user\n      await this.conversationMembersService.addMember({\n        conversation_id: conversation.conversation_id,\n        user_id: dto.user_id,\n      });\n\n      return conversation;\n    } else\n      throw new BadRequestException(\n        `${user.user_id} and ${dto.user_id} not friend`,\n      );\n  }\n\n  async remote(user: IUser, dto: DeleteConversationDto) {\n    const conversation = await this.conversationsRepository.findOne({\n      where: { conversation_id: dto.conversation_id },\n    });\n    if (!conversation) throw new BadRequestException();\n\n    const permissionUser = await this.conversationMembersService.findMember(\n      user.user_id,\n      conversation.conversation_id,\n    );\n\n    if (!permissionUser)\n      throw new ForbiddenException(\n        `${user.user_id} is not admin conversation ${dto.conversation_id}`,\n      );\n    else if (permissionUser.memberType == MemberType.MEMBER) {\n      throw new ForbiddenException(\n        `${user.user_id} is not admin conversation ${dto.conversation_id}`,\n      );\n    } else {\n      await this.conversationMembersService.remoteAllMember(\n        dto.conversation_id,\n      );\n\n      return await this.conversationsRepository.delete({\n        conversation_id: dto.conversation_id,\n      });\n    }\n  }\n\n  async update(dto: UpdateConversationDto, file: Express.Multer.File) {\n    const findConversation = await this.findConversionById(dto.conversation_id);\n\n    if (!file) {\n      return await this.conversationsRepository.update(\n        { conversation_id: dto.conversation_id },\n        {\n          ...dto,\n        },\n      );\n    }\n\n    const avatar = findConversation.avatar;\n\n    if (avatar) {\n      try {\n        if (fs.existsSync(avatar)) {\n          fs.unlinkSync(avatar);\n        }\n      } catch (error) {\n        console.error('Error deleting old avatar:', error);\n      }\n    }\n    return await this.conversationsRepository.update(\n      { conversation_id: dto.conversation_id },\n      {\n        ...dto,\n        avatar: file.path,\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConversationDto.html":{"url":"classes/CreateConversationDto.html","title":"class - CreateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/dto/create-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                conversationName\n                            \n                            \n                                    \n                                    \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        conversationName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({example: 'Chat me'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/dto/create-conversation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/dto/create-conversation.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsUUID } from 'class-validator';\n\nexport class CreateConversationDto {\n  @IsString()\n  @ApiProperty({ example: 'Chat me' })\n  conversationName: string;\n\n  @IsString()\n  @IsUUID()\n  user_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGroupMemberDto.html":{"url":"classes/CreateGroupMemberDto.html","title":"class - CreateGroupMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGroupMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group-members/dto/create-group-member.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateGroupMemberDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messgages/dto/create-messgage.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                conversation_id\n                            \n                            \n                                    \n                                    \n                                message\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        conversation_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'conversation_id not null'})@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messgages/dto/create-messgage.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty({message: 'message not null'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messgages/dto/create-messgage.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsUUID } from 'class-validator';\n\nexport class CreateMessageDto {\n  @IsString()\n  @IsNotEmpty({ message: 'conversation_id not null' })\n  @IsUUID()\n  conversation_id: string;\n\n  @IsString()\n  @IsNotEmpty({ message: 'message not null' })\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRelationshipDto.html":{"url":"classes/CreateRelationshipDto.html","title":"class - CreateRelationshipDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRelationshipDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/relationships/dto/create-relationship.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                user_id2\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        user_id2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'ID user 2 not null'})@IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/relationships/dto/create-relationship.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsUUID } from 'class-validator';\n\nexport class CreateRelationshipDto {\n  @IsNotEmpty({ message: 'ID user 2 not null' })\n  @IsString()\n  @IsUUID()\n  user_id2: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/CreatorConversationGuard.html":{"url":"guards/CreatorConversationGuard.html","title":"guard - CreatorConversationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    CreatorConversationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guard/guard-conversation-creator.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(conversationsService: ConversationsService)\n                    \n                \n                        \n                            \n                                Defined in src/guard/guard-conversation-creator.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        conversationsService\n                                                  \n                                                        \n                                                                        ConversationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guard/guard-conversation-creator.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { isUUID } from 'class-validator';\nimport { ConversationsService } from './../conversations/conversations.service';\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\n\n@Injectable()\nexport class CreatorConversationGuard implements CanActivate {\n  constructor(private conversationsService: ConversationsService) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n\n    const user = request.user;\n    const body = request.body;\n\n    if (!isUUID(body.conversation_id, '4') || !isUUID(user.user_id, '4')) {\n      return false;\n    }\n\n    const creator = await this.conversationsService.findConversionById(\n      body.conversation_id,\n    );\n\n    return creator.createdBy == user.user_id ? true : false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\n\nDATA_SOURCE \n\nDATA_SOURCE \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nDATA_SOURCE  -->\n\nDatabaseModule->DATA_SOURCE \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            DATA_SOURCE\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DatabaseProviders } from './database.providers';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        synchronize: configService.get('POSTGRES_SYNC'),\n      }),\n    }),\n  ],\n  providers: [...DatabaseProviders],\n  exports: [...DatabaseProviders, 'DATA_SOURCE'],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteConversationDto.html":{"url":"classes/DeleteConversationDto.html","title":"class - DeleteConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/dto/delete-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                conversation_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        conversation_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/dto/delete-conversation.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class DeleteConversationDto {\n  @IsString()\n  @IsNotEmpty()\n  conversation_id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/FriendRelationshipGuard.html":{"url":"guards/FriendRelationshipGuard.html","title":"guard - FriendRelationshipGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    FriendRelationshipGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guard/guard-relationship-friend.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(relationshipsService: RelationshipsService)\n                    \n                \n                        \n                            \n                                Defined in src/guard/guard-relationship-friend.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        relationshipsService\n                                                  \n                                                        \n                                                                        RelationshipsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guard/guard-relationship-friend.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  Body,\n} from '@nestjs/common';\nimport { isUUID } from 'class-validator';\nimport { RelationshipType } from 'src/helper/helper.enum';\nimport { RelationshipsService } from 'src/relationships/relationships.service';\n\n@Injectable()\nexport class FriendRelationshipGuard implements CanActivate {\n  constructor(private relationshipsService: RelationshipsService) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n\n    const user = request.user;\n    const body = request.body;\n\n    if (!isUUID(body.user_id, '4') || !isUUID(user.user_id, '4')) {\n      return false;\n    }\n\n    const relationship = await this.relationshipsService.findRelationship(\n      user.user_id,\n      body.user_id,\n    );\n\n    if (!relationship) return false;\n\n    return relationship.relationship == RelationshipType.FRIEND ? true : false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupMember.html":{"url":"classes/GroupMember.html","title":"class - GroupMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group-members/entities/group-member.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                group_id\n                            \n                            \n                                    \n                                groupmember_id\n                            \n                            \n                                    \n                                memberType\n                            \n                            \n                                    \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        group_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group-members/entities/group-member.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        groupmember_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group-members/entities/group-member.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        memberType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MemberType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: MemberType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group-members/entities/group-member.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/group-members/entities/group-member.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MemberType } from 'src/helper/helper.enum';\nimport { Column, PrimaryGeneratedColumn } from 'typeorm';\n\nexport class GroupMember {\n  @PrimaryGeneratedColumn('uuid')\n  groupmember_id: string;\n\n  @Column()\n  user_id: string;\n\n  @Column()\n  group_id: string;\n\n  @Column({ type: 'enum', enum: MemberType })\n  memberType: MemberType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GroupMembersController.html":{"url":"controllers/GroupMembersController.html","title":"controller - GroupMembersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GroupMembersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group-members/group-members.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                group-members\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createGroupMemberDto: CreateGroupMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/group-members/group-members.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createGroupMemberDto\n                                            \n                                                            CreateGroupMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/group-members/group-members.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/group-members/group-members.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/group-members/group-members.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateGroupMemberDto: UpdateGroupMemberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/group-members/group-members.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateGroupMemberDto\n                                            \n                                                            UpdateGroupMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { GroupMembersService } from './group-members.service';\nimport { CreateGroupMemberDto } from './dto/create-group-member.dto';\nimport { UpdateGroupMemberDto } from './dto/update-group-member.dto';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('group-members')\n@Controller('group-members')\nexport class GroupMembersController {\n  constructor(private readonly groupMembersService: GroupMembersService) {}\n\n  @Post()\n  create(@Body() createGroupMemberDto: CreateGroupMemberDto) {\n    return this.groupMembersService.create(createGroupMemberDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.groupMembersService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.groupMembersService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateGroupMemberDto: UpdateGroupMemberDto,\n  ) {\n    return this.groupMembersService.update(+id, updateGroupMemberDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.groupMembersService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GroupMembersModule.html":{"url":"modules/GroupMembersModule.html","title":"module - GroupMembersModule","body":"\n                   \n\n\n\n\n    Modules\n    GroupMembersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GroupMembersModule\n\n\n\ncluster_GroupMembersModule_providers\n\n\n\n\nGroupMembersService\n\nGroupMembersService\n\n\n\nGroupMembersModule\n\nGroupMembersModule\n\nGroupMembersModule -->\n\nGroupMembersService->GroupMembersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/group-members/group-members.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GroupMembersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GroupMembersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GroupMembersService } from './group-members.service';\nimport { GroupMembersController } from './group-members.controller';\n\n@Module({\n  controllers: [GroupMembersController],\n  providers: [GroupMembersService],\n})\nexport class GroupMembersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GroupMembersService.html":{"url":"injectables/GroupMembersService.html","title":"injectable - GroupMembersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GroupMembersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group-members/group-members.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createGroupMemberDto: CreateGroupMemberDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/group-members/group-members.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createGroupMemberDto\n                                            \n                                                            CreateGroupMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/group-members/group-members.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/group-members/group-members.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/group-members/group-members.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateGroupMemberDto: UpdateGroupMemberDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/group-members/group-members.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateGroupMemberDto\n                                            \n                                                            UpdateGroupMemberDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateGroupMemberDto } from './dto/create-group-member.dto';\nimport { UpdateGroupMemberDto } from './dto/update-group-member.dto';\n\n@Injectable()\nexport class GroupMembersService {\n  create(createGroupMemberDto: CreateGroupMemberDto) {\n    return 'This action adds a new groupMember';\n  }\n\n  findAll() {\n    return `This action returns all groupMembers`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} groupMember`;\n  }\n\n  update(id: number, updateGroupMemberDto: UpdateGroupMemberDto) {\n    return `This action updates a #${id} groupMember`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} groupMember`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUser.html":{"url":"interfaces/IUser.html","title":"interface - IUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            user_id\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUser {\n  user_id: string;\n  username: string;\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-auth.guard.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-auth.guard.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from 'src/decorator/customize';\n\n/*\n  - Bảo vệ các route yêu cầu xác thực JWT, cho phép bỏ qua các route được đánh dấu là public.\n*/\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user, info) {\n    if (err || !user) {\n      throw err || new UnauthorizedException('Token invalid');\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passpost/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passpost/jwt.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/passpost/jwt.strategy.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { UsersService } from 'src/users/users.service';\nimport { IUser } from 'src/users/users.interface';\n\n/*\n  - JwtStrategy: Dùng để định nghĩa chiến lược xác thực\n  - Dùng PasspostStrategy để tạo chiến lược xác thực\n*/\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private configService: ConfigService,\n    private usersService: UsersService,\n  ) {\n    super({\n      // Cấu hình chiến lược để trích xuất JWT từ headẻ Authorization dưới dạng bearer token\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n    });\n  }\n  // Xác thực payload người dùng và trả về thông tin\n  async validate(payload: IUser) {\n    const { user_id, username, email } = payload;\n    return {\n      user_id,\n      username,\n      email,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/*\n    - Bảo vệ các route yêu câù xác thực local\n*/\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passpost/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passpost/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/passpost/local.strategy.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from '../auth.service';\nimport { User } from 'src/users/entities/user.entity';\n\n// Chiến thực xác thực local\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  // Kiểm tra email, password đúng hay chưa\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException('Username/Password invalid');\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Email không được trống'})@IsEmail({}, {message: 'Email không đúng định dạng'})@IsString({message: 'Type email is string'})@ApiProperty({example: 'user1@gmail.com', description: 'email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/login-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Mật khẩu không được trống'})@MinLength(8, {message: 'Mật khẩu không được dưới 8 kí tự'})@MaxLength(10, {message: 'Mật Khẩu không được trên 10 kí tự'})@IsString({message: 'Type password is string'})@ApiProperty({example: '12345678', description: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/login-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class LoginUserDto {\n  @IsNotEmpty({ message: 'Email không được trống' })\n  @IsEmail({}, { message: 'Email không đúng định dạng' })\n  @IsString({ message: 'Type email is string' })\n  @ApiProperty({ example: 'user1@gmail.com', description: 'email' })\n  email: string;\n\n  @IsNotEmpty({ message: 'Mật khẩu không được trống' })\n  @MinLength(8, { message: 'Mật khẩu không được dưới 8 kí tự' })\n  @MaxLength(10, { message: 'Mật Khẩu không được trên 10 kí tự' })\n  @IsString({ message: 'Type password is string' })\n  @ApiProperty({ example: '12345678', description: 'password' })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/MemberConversationGuard.html":{"url":"guards/MemberConversationGuard.html","title":"guard - MemberConversationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    MemberConversationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guard/guard-conversation-member.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(conversationMembersService: ConversationMembersService, conversationsService: ConversationsService)\n                    \n                \n                        \n                            \n                                Defined in src/guard/guard-conversation-member.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        conversationMembersService\n                                                  \n                                                        \n                                                                        ConversationMembersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        conversationsService\n                                                  \n                                                        \n                                                                        ConversationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guard/guard-conversation-member.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { ConversationsService } from './../conversations/conversations.service';\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { isUUID } from 'class-validator';\nimport { ConversationMembersService } from 'src/conversation-members/conversation-members.service';\n\n@Injectable()\nexport class MemberConversationGuard implements CanActivate {\n  constructor(\n    private conversationMembersService: ConversationMembersService,\n    private conversationsService: ConversationsService,\n  ) {}\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n\n    const user = request.user;\n    const body = request.body;\n\n    if (!isUUID(body.conversation_id, '4') || !isUUID(user.user_id, '4')) {\n      return false;\n    }\n\n    await this.conversationsService.findConversionById(body.conversation_id);\n\n    const findMember = await this.conversationMembersService.findMember(\n      user.user_id,\n      body.conversation_id,\n    );\n\n    return findMember ? true : false;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Message.html":{"url":"entities/Message.html","title":"entity - Message","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messgages/entities/messgage.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                conversation_id\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                createdBy\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                message_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        conversation_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messgages/entities/messgage.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messgages/entities/messgage.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messgages/entities/messgage.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messgages/entities/messgage.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/messgages/entities/messgage.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity('messages')\nexport class Message {\n  @PrimaryGeneratedColumn('uuid')\n  message_id: string;\n\n  @Column()\n  createdBy: string;\n\n  @Column()\n  conversation_id: string;\n\n  @Column()\n  message: string;\n\n  @Column()\n  createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MessagesController.html":{"url":"controllers/MessagesController.html","title":"controller - MessagesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MessagesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messgages/messgages.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                messages\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: IUser, createMessageDto: CreateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ResponseMessage('Create message')\n                \n            \n\n                    \n                        \n                            Defined in src/messgages/messgages.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createMessageDto\n                                            \n                                                            CreateMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\n\nimport { IUser } from 'src/users/users.interface';\nimport { ResponseMessage, User } from 'src/decorator/customize';\nimport { ApiTags } from '@nestjs/swagger';\nimport { MessagesService } from './messgages.service';\nimport { CreateMessageDto } from './dto/create-messgage.dto';\n\n@ApiTags('Messages')\n@Controller('messages')\nexport class MessagesController {\n  constructor(private readonly messagesService: MessagesService) {}\n  @Post()\n  @ResponseMessage('Create message')\n  async create(\n    @User() user: IUser,\n    @Body() createMessageDto: CreateMessageDto,\n  ) {\n    return await this.messagesService.create(user, createMessageDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_imports\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nConversationMembersModule\n\nConversationMembersModule\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nConversationMembersModule->MessagesModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nMessagesModule -->\n\nDatabaseModule->MessagesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/messgages/messgages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MessagesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConversationMembersModule\n                        \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { Repository } from 'typeorm';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { ConversationMember } from 'src/conversation-members/entities/conversation-member.entity';\nimport { ConversationMembersService } from 'src/conversation-members/conversation-members.service';\nimport { ConversationMembersModule } from 'src/conversation-members/conversation-members.module';\nimport { ConversationsService } from 'src/conversations/conversations.service';\nimport { Message } from './entities/messgage.entity';\nimport { MessagesService } from './messgages.service';\nimport { MessagesController } from './messgages.controller';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Message]),\n    DatabaseModule,\n    ConversationMembersModule,\n  ],\n  controllers: [MessagesController],\n  providers: [MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messgages/messgages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesRepository: Repository, cmService: ConversationMembersService)\n                    \n                \n                        \n                            \n                                Defined in src/messgages/messgages.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cmService\n                                                  \n                                                        \n                                                                        ConversationMembersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: IUser, createMessageDto: CreateMessageDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/messgages/messgages.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createMessageDto\n                                            \n                                                            CreateMessageDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Injectable } from '@nestjs/common';\n\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { IUser } from 'src/users/users.interface';\nimport { ConversationMembersService } from 'src/conversation-members/conversation-members.service';\nimport { Message } from './entities/messgage.entity';\nimport { CreateMessageDto } from './dto/create-messgage.dto';\n\n@Injectable()\nexport class MessagesService {\n  constructor(\n    @InjectRepository(Message)\n    private messagesRepository: Repository,\n    private cmService: ConversationMembersService,\n  ) {}\n\n  async create(user: IUser, createMessageDto: CreateMessageDto) {\n    const user_id = user.user_id;\n    const { conversation_id, message } = createMessageDto;\n    if (this.cmService.findMember(user_id, conversation_id)) {\n      return await this.messagesRepository.save({\n        user_id,\n        conversation_id,\n        message,\n        time: new Date(),\n      });\n    } else throw new ForbiddenException();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MulterConfigService.html":{"url":"injectables/MulterConfigService.html","title":"injectable - MulterConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MulterConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/multer.config.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                getRootPath\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMulterOptions\n                            \n                            \n                                ensureExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMulterOptions\n                        \n                    \n                \n            \n            \n                \ncreateMulterOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/multer.config.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     MulterModuleOptions\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ensureExists\n                        \n                    \n                \n            \n            \n                \nensureExists(targetDirectory: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/multer.config.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                targetDirectory\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        getRootPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/core/multer.config.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  MulterModuleOptions,\n  MulterOptionsFactory,\n} from '@nestjs/platform-express';\nimport { diskStorage } from 'multer';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n@Injectable()\nexport class MulterConfigService implements MulterOptionsFactory {\n  getRootPath = () => {\n    return process.cwd();\n  };\n  ensureExists(targetDirectory: string) {\n    fs.mkdir(targetDirectory, { recursive: true }, (error) => {\n      if (!error) {\n        console.log('Directory successfully created, or it already exists.');\n        return;\n      }\n      switch (error.code) {\n        case 'EEXIST':\n          // Error:\n          // Requested location already exists, but it's not a directory.\n          break;\n        case 'ENOTDIR':\n          // Error:\n          // The parent hierarchy contains a file with the same name as the dir\n          // you're trying to create.\n          break;\n        default:\n          // Some other error like permission denied.\n          console.error(error);\n          break;\n      }\n    });\n  }\n\n  createMulterOptions(): MulterModuleOptions {\n    return {\n      storage: diskStorage({\n        destination: (req, file, cb) => {\n          const folder = req?.headers?.folder_type ?? 'default';\n          this.ensureExists(`public/images/${folder}`);\n          cb(null, path.join(this.getRootPath(), `public/images/${folder}`));\n        },\n        filename: (req, file, cb) => {\n          //get image extension\n          let extName = path.extname(file.originalname);\n          //get image's name (without extension)\n          let baseName = path.basename(file.originalname, extName);\n          let finalName = `${baseName}-${Date.now()}${extName}`;\n          cb(null, finalName);\n        },\n      }),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                age\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                gender\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                privacy\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Cau Giay, Ha Noi', description: 'address'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 20, description: 'age'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Good boy', description: 'description'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsString()@IsNotEmpty({message: 'Email không được trống'})@ApiProperty({example: 'user@gmail.com', description: 'email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GenderType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'gender'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @MinLength(8)@MaxLength(10)@IsString()@IsNotEmpty({message: 'Mật khẩu không được trống'})@ApiProperty({example: '12345678', description: 'password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        privacy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrivacyType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Tên nguời dùng không được trống'})@IsString()@ApiProperty({example: 'Nguyễn Tuấn Thành', description: 'username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsSemVer,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nimport { GenderType, PrivacyType } from 'src/helper/helper.enum';\n\nexport class RegisterUserDto {\n  @IsNotEmpty({ message: 'Tên nguời dùng không được trống' })\n  @IsString()\n  @ApiProperty({ example: 'Nguyễn Tuấn Thành', description: 'username' })\n  username: string;\n\n  @IsEmail()\n  @IsString()\n  @IsNotEmpty({ message: 'Email không được trống' })\n  @ApiProperty({ example: 'user@gmail.com', description: 'email' })\n  email: string;\n\n  @MinLength(8)\n  @MaxLength(10)\n  @IsString()\n  @IsNotEmpty({ message: 'Mật khẩu không được trống' })\n  @ApiProperty({ example: '12345678', description: 'password' })\n  password: string;\n\n  @ApiProperty({ example: 20, description: 'age' })\n  @IsOptional()\n  age: number;\n\n  @ApiProperty({ example: GenderType.MALE, description: 'gender' })\n  @IsOptional()\n  gender: GenderType;\n\n  @ApiProperty({ example: 'Cau Giay, Ha Noi', description: 'address' })\n  @IsOptional()\n  address: string;\n\n  @ApiProperty({ example: 'Good boy', description: 'description' })\n  @IsOptional()\n  description: string;\n\n  @IsOptional()\n  @ApiProperty({ example: PrivacyType.PUBLIC })\n  privacy: PrivacyType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Relationship.html":{"url":"entities/Relationship.html","title":"entity - Relationship","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Relationship\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/relationships/entities/relationship.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                relationship\n                            \n                            \n                                    \n                                relationship_id\n                            \n                            \n                                    \n                                user_id1\n                            \n                            \n                                    \n                                user_id2\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        relationship\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RelationshipType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: RelationshipType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/relationships/entities/relationship.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        relationship_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/relationships/entities/relationship.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user_id1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/relationships/entities/relationship.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user_id2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/relationships/entities/relationship.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { RelationshipType } from 'src/helper/helper.enum';\nimport { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Relationship {\n  @PrimaryGeneratedColumn('uuid')\n  relationship_id: string;\n\n  @Column()\n  user_id1: string;\n\n  @Column()\n  user_id2: string;\n\n  @Column({\n    type: 'enum',\n    enum: RelationshipType,\n  })\n  relationship: RelationshipType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RelationshipsController.html":{"url":"controllers/RelationshipsController.html","title":"controller - RelationshipsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RelationshipsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/relationships/relationships.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                relationships\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                follow\n                            \n                            \n                                    \n                                    \n                                    \n                                unFollow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        follow\n                        \n                    \n                \n            \n            \n                \n                        \n                    follow(dto: CreateRelationshipDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('follow')@ResponseMessage('Create relationship')@ApiBody({type: CreateRelationshipDto})\n                \n            \n\n                    \n                        \n                            Defined in src/relationships/relationships.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateRelationshipDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        unFollow\n                        \n                    \n                \n            \n            \n                \n                        \n                    unFollow(dto: CreateRelationshipDto, user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('unfollow')@ResponseMessage('Create relationship')@ApiBody({type: CreateRelationshipDto})\n                \n            \n\n                    \n                        \n                            Defined in src/relationships/relationships.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateRelationshipDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { RelationshipsService } from './relationships.service';\nimport { CreateRelationshipDto } from './dto/create-relationship.dto';\nimport { UpdateRelationshipDto } from './dto/update-relationship.dto';\nimport { ResponseMessage, User } from 'src/decorator/customize';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\nimport { IUser } from 'src/users/users.interface';\n\n@ApiTags('Relationships')\n@Controller('relationships')\nexport class RelationshipsController {\n  constructor(private readonly relationshipsService: RelationshipsService) {}\n\n  @Post('follow')\n  @ResponseMessage('Create relationship')\n  @ApiBody({ type: CreateRelationshipDto })\n  follow(@Body() dto: CreateRelationshipDto, @User() user: IUser) {\n    return this.relationshipsService.follow(dto, user);\n  }\n\n  @Post('unfollow')\n  @ResponseMessage('Create relationship')\n  @ApiBody({ type: CreateRelationshipDto })\n  unFollow(@Body() dto: CreateRelationshipDto, @User() user: IUser) {\n    return this.relationshipsService.unFollow(dto, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RelationshipsModule.html":{"url":"modules/RelationshipsModule.html","title":"module - RelationshipsModule","body":"\n                   \n\n\n\n\n    Modules\n    RelationshipsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RelationshipsModule\n\n\n\ncluster_RelationshipsModule_exports\n\n\n\ncluster_RelationshipsModule_providers\n\n\n\ncluster_RelationshipsModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nRelationshipsModule\n\nRelationshipsModule\n\nRelationshipsModule -->\n\nDatabaseModule->RelationshipsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nRelationshipsModule -->\n\nUsersModule->RelationshipsModule\n\n\n\n\n\nRelationshipsService \n\nRelationshipsService \n\nRelationshipsService  -->\n\nRelationshipsModule->RelationshipsService \n\n\n\n\n\nRelationshipsService\n\nRelationshipsService\n\nRelationshipsModule -->\n\nRelationshipsService->RelationshipsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/relationships/relationships.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RelationshipsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RelationshipsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RelationshipsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { RelationshipsService } from './relationships.service';\nimport { RelationshipsController } from './relationships.controller';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { Relationship } from './entities/relationship.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Relationship]),\n    DatabaseModule,\n    UsersModule,\n  ],\n  controllers: [RelationshipsController],\n  providers: [RelationshipsService],\n  exports: [RelationshipsService],\n})\nexport class RelationshipsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RelationshipsService.html":{"url":"injectables/RelationshipsService.html","title":"injectable - RelationshipsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RelationshipsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/relationships/relationships.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findRelationship\n                            \n                            \n                                    Async\n                                follow\n                            \n                            \n                                    Async\n                                unFollow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(relationshipsRepository: Repository, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/relationships/relationships.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        relationshipsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findRelationship\n                        \n                    \n                \n            \n            \n                \nfindRelationship(user_id1: string, user_id2: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/relationships/relationships.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id1\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user_id2\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        follow\n                        \n                    \n                \n            \n            \n                \n                        \n                    follow(dto: CreateRelationshipDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/relationships/relationships.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateRelationshipDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        unFollow\n                        \n                    \n                \n            \n            \n                \n                        \n                    unFollow(dto: CreateRelationshipDto, user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/relationships/relationships.service.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateRelationshipDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ReactionPostType } from './../helper/helper.enum';\nimport { User } from './../users/entities/user.entity';\nimport { UsersService } from './../users/users.service';\nimport {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\n\nimport { Relationship } from './entities/relationship.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { IUser } from 'src/users/users.interface';\n\nimport { RelationshipType } from 'src/helper/helper.enum';\nimport { CreateRelationshipDto } from './dto/create-relationship.dto';\n\n@Injectable()\nexport class RelationshipsService {\n  constructor(\n    @InjectRepository(Relationship)\n    private relationshipsRepository: Repository,\n    private usersService: UsersService,\n  ) {}\n\n  findRelationship(user_id1: string, user_id2: string) {\n    return this.relationshipsRepository.findOne({\n      where: {\n        user_id1,\n        user_id2,\n      },\n    });\n  }\n\n  async follow(dto: CreateRelationshipDto, user: IUser) {\n    const { user_id2 } = dto;\n    const user_id1 = user.user_id;\n\n    const user2 = await this.usersService.findUserById(user_id2);\n\n    if (!user2) throw new NotFoundException();\n\n    const relationship_user1_user2 = await this.findRelationship(\n      user_id1,\n      user_id2,\n    );\n\n    const relationship_user2_user1 = await this.findRelationship(\n      user_id2,\n      user_id1,\n    );\n\n    if (!relationship_user1_user2) {\n      if (!relationship_user2_user1) {\n        await this.relationshipsRepository.save({\n          user_id1,\n          user_id2,\n          relationship: RelationshipType.FOLLOW,\n        });\n        return {\n          user_id1,\n          user_id2,\n          relationship: RelationshipType.FOLLOW,\n        };\n      } else {\n        await this.relationshipsRepository.save({\n          user_id1: user_id1,\n          user_id2: user_id2,\n          relationship: RelationshipType.FRIEND,\n        });\n\n        await this.relationshipsRepository.update(\n          {\n            user_id1: user_id2,\n            user_id2: user_id1,\n          },\n          {\n            relationship: RelationshipType.FRIEND,\n          },\n        );\n\n        return {\n          user_id1: user_id1,\n          user_id2: user_id2,\n          relationship: RelationshipType.FRIEND,\n        };\n      }\n    }\n    throw new BadRequestException(\n      `${user_id1} followed ${user_id2} or ${user_id1} and ${user_id2} is friend`,\n    );\n  }\n\n  async unFollow(dto: CreateRelationshipDto, user: IUser) {\n    const { user_id2 } = dto;\n    const user_id1 = user.user_id;\n\n    const user2 = await this.usersService.findUserById(user_id2);\n\n    if (!user2) throw new NotFoundException();\n\n    const relationship_user1_user2 = await this.findRelationship(\n      user_id1,\n      user_id2,\n    );\n\n    const relationship_user2_user1 = await this.findRelationship(\n      user_id2,\n      user_id1,\n    );\n\n    if (!relationship_user1_user2) {\n      throw new BadRequestException(\n        `${user_id1} and ${user_id2} not friend or follower`,\n      );\n    } else if (\n      relationship_user1_user2.relationship == RelationshipType.FRIEND\n    ) {\n      await this.relationshipsRepository.delete({\n        user_id1: user_id1,\n        user_id2: user_id2,\n      });\n      await this.relationshipsRepository.update(\n        {\n          user_id1: user_id2,\n          user_id2: user_id1,\n        },\n        {\n          relationship: RelationshipType.FOLLOW,\n        },\n      );\n      return {\n        message: `${user_id1} unfollow ${user_id2} and ${user_id2} follow ${user_id1}`,\n      };\n    } else if (\n      relationship_user1_user2.relationship == RelationshipType.FOLLOW\n    ) {\n      await this.relationshipsRepository.delete(relationship_user1_user2);\n      return {\n        message: `${user_id1} unfollowed ${user_id2}`,\n      };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            statusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        statusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        statusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RESPONSE_MESSAGE } from 'src/decorator/customize';\n\nexport interface Response {\n  statusCode: number;\n  // message: string;\n  data: any;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  constructor(private reflector: Reflector) {}\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(\n      map((data) => ({\n        statusCode: context.switchToHttp().getResponse().statusCode,\n        message:\n          this.reflector.get(RESPONSE_MESSAGE, context.getHandler()) ||\n          '',\n        data: data,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/transform.interceptor.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/transform.interceptor.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RESPONSE_MESSAGE } from 'src/decorator/customize';\n\nexport interface Response {\n  statusCode: number;\n  // message: string;\n  data: any;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  constructor(private reflector: Reflector) {}\n\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(\n      map((data) => ({\n        statusCode: context.switchToHttp().getResponse().statusCode,\n        message:\n          this.reflector.get(RESPONSE_MESSAGE, context.getHandler()) ||\n          '',\n        data: data,\n      })),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConversationDto.html":{"url":"classes/UpdateConversationDto.html","title":"class - UpdateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                conversation_id\n                            \n                            \n                                    \n                                    \n                                conversationName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        conversation_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/dto/update-conversation.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        conversationName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/conversations/dto/update-conversation.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class UpdateConversationDto {\n  @IsString()\n  @IsNotEmpty()\n  conversation_id: string;\n\n  @IsString()\n  @IsOptional()\n  conversationName: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateGroupMemberDto.html":{"url":"classes/UpdateGroupMemberDto.html","title":"class - UpdateGroupMemberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateGroupMemberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group-members/dto/update-group-member.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateGroupMemberDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateGroupMemberDto } from './create-group-member.dto';\n\nexport class UpdateGroupMemberDto extends PartialType(CreateGroupMemberDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessgageDto.html":{"url":"classes/UpdateMessgageDto.html","title":"class - UpdateMessgageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessgageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/messgages/dto/update-messgage.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateMessageDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateMessageDto } from './create-messgage.dto';\n\nexport class UpdateMessgageDto extends PartialType(CreateMessageDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRelationshipDto.html":{"url":"classes/UpdateRelationshipDto.html","title":"class - UpdateRelationshipDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRelationshipDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/relationships/dto/update-relationship.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateRelationshipDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateRelationshipDto } from './create-relationship.dto';\n\nexport class UpdateRelationshipDto extends PartialType(CreateRelationshipDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                age\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                gender\n                            \n                            \n                                    \n                                    \n                                privacy\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Cau Giay, Ha Noi', description: 'address'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 20, description: 'age'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'Good boy', description: 'description'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GenderType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: undefined, description: 'gender'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        privacy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrivacyType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ApiProperty({example: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Tên nguời dùng không được trống'})@IsString()@ApiProperty({example: 'Nguyễn Tuấn Thành', description: 'username'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nimport { GenderType, PrivacyType } from 'src/helper/helper.enum';\n\nexport class UpdateUserDto {\n  @IsNotEmpty({ message: 'Tên nguời dùng không được trống' })\n  @IsString()\n  @ApiProperty({ example: 'Nguyễn Tuấn Thành', description: 'username' })\n  @IsOptional()\n  username: string;\n\n  @ApiProperty({ example: 20, description: 'age' })\n  @IsOptional()\n  age: number;\n\n  @ApiProperty({ example: GenderType.MALE, description: 'gender' })\n  @IsOptional()\n  gender: GenderType;\n\n  @ApiProperty({ example: 'Cau Giay, Ha Noi', description: 'address' })\n  @IsOptional()\n  address: string;\n\n  @ApiProperty({ example: 'Good boy', description: 'description' })\n  @IsOptional()\n  description: string;\n\n  @IsOptional()\n  @ApiProperty({ example: PrivacyType.PUBLIC })\n  privacy: PrivacyType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                age\n                            \n                            \n                                    \n                                avatar\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                gender\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                privacy\n                            \n                            \n                                    \n                                refreshToken\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user_id\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GenderType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: GenderType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@MinLength(8)@MaxLength(10)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        privacy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrivacyType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PrivacyType, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        refreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StatusType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: StatusType, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { MaxLength, MinLength } from 'class-validator';\nimport { GenderType, PrivacyType, StatusType } from 'src/helper/helper.enum';\nimport { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  user_id: string;\n\n  @Column()\n  username: string;\n\n  @Column()\n  email: string;\n\n  @Column()\n  @MinLength(8)\n  @MaxLength(10)\n  password: string;\n\n  @Column({ default: null })\n  avatar: string;\n\n  @Column({ type: 'int' })\n  age: number;\n\n  @Column({ type: 'enum', enum: GenderType })\n  gender: GenderType;\n\n  @Column()\n  address: string;\n\n  @Column({ default: null })\n  description: string;\n\n  @Column({ type: 'enum', enum: StatusType, default: StatusType.OFF })\n  status: StatusType;\n\n  @Column({ default: null })\n  refreshToken: string;\n\n  @Column()\n  createdAt: Date;\n\n  @Column({ default: null })\n  updatedAt: Date;\n\n  @Column({ default: null })\n  deletedAt: Date;\n\n  @Column({ type: 'enum', enum: PrivacyType, default: PrivacyType.PUBLIC })\n  privacy: PrivacyType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                deleteUser\n                            \n                            \n                                    \n                                    \n                                    \n                                findUserById\n                            \n                            \n                                    \n                                    \n                                    \n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(user: IUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()@ResponseMessage('Delete user')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(user_id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':user_id')@ResponseMessage('User by user_id')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUser(updateUserDto: UpdateUserDto, user: IUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ResponseMessage('Update User')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Patch,\n  Delete,\n  UploadedFile,\n  ParseFilePipeBuilder,\n  HttpStatus,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { Public, ResponseMessage, User } from 'src/decorator/customize';\nimport { IUser } from './users.interface';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ApiTags } from '@nestjs/swagger';\nimport { FileInterceptor } from '@nestjs/platform-express';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Public()\n  @Get(':user_id')\n  @ResponseMessage('User by user_id')\n  findUserById(@Param('user_id') user_id: string) {\n    return this.usersService.findUserById(user_id);\n  }\n\n  @Delete()\n  @ResponseMessage('Delete user')\n  deleteUser(@User() user: IUser) {\n    return this.usersService.deleteUser(user);\n  }\n\n  @Patch()\n  @ResponseMessage('Update User')\n  @UseInterceptors(FileInterceptor('avatar-user'))\n  updateUser(\n    @Body() updateUserDto: UpdateUserDto,\n    @User() user: IUser,\n    @UploadedFile(\n      new ParseFilePipeBuilder()\n        .addFileTypeValidator({\n          fileType: /(jpg|jpeg|png|gif)$/,\n        })\n        .addMaxSizeValidator({\n          maxSize: 1000 * 1024,\n        })\n        .build({\n          errorHttpStatusCode: HttpStatus.UNPROCESSABLE_ENTITY,\n          fileIsRequired: false,\n        }),\n    )\n    file: Express.Multer.File,\n  ) {\n    return this.usersService.updateProfile(updateUserDto, user, file);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { DatabaseModule } from 'src/database/database.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\n\nimport { MulterConfigService } from 'src/core/multer.config';\nimport { MulterModule } from '@nestjs/platform-express';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    DatabaseModule,\n    MulterModule.registerAsync({\n      useClass: MulterConfigService,\n    }),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                findUserByToken\n                            \n                            \n                                getHashPassword\n                            \n                            \n                                updateUserToken\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                isValidPassword\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(user: IUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserByEmail(userEmail: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userEmail\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserById(user_id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user_id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isValidPassword\n                        \n                    \n                \n            \n            \n                \nisValidPassword(password: string, hash: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                hash\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(user: RegisterUserDto, file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(dto: UpdateUserDto, user: IUser, file: Express.Multer.File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            IUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        findUserByToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHashPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserToken\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:33\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { compareSync, genSaltSync, hashSync } from 'bcrypt';\nimport { RegisterUserDto } from './dto/create-user.dto';\nimport { IUser } from './users.interface';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { PrivacyType } from 'src/helper/helper.enum';\nimport * as fs from 'fs';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  getHashPassword = (password: string) => {\n    const salt = genSaltSync(10);\n    const hash = hashSync(password, salt);\n    return hash;\n  };\n\n  isValidPassword(password: string, hash: string) {\n    return compareSync(password, hash);\n  }\n\n  updateUserToken = (refreshToken: string, user_id: string) => {\n    return this.usersRepository.update({ user_id }, { refreshToken });\n  };\n\n  findUserByToken = async (refreshToken: string) => {\n    return await this.usersRepository.findOne({\n      where: { refreshToken: refreshToken },\n    });\n  };\n\n  async findUserByEmail(userEmail: string) {\n    const user = await this.usersRepository.findOne({\n      where: { email: userEmail },\n    });\n\n    if (user) if (!user.deletedAt) return user;\n    return null;\n  }\n\n  async register(user: RegisterUserDto, file: Express.Multer.File) {\n    const { username, email, password, age, gender, address, description } =\n      user;\n\n    const userDb = await this.usersRepository.findOneBy({ email });\n\n    if (userDb) {\n      throw new BadRequestException(`Email: ${email} already exists`);\n    }\n\n    const hashPassword = this.getHashPassword(password);\n\n    let avatar = '';\n\n    if (!file) avatar = null;\n    else avatar = file.path;\n\n    const newUser = {\n      username,\n      email,\n      password: hashPassword,\n      avatar,\n      age,\n      gender,\n      address,\n      description,\n      createdAt: new Date(),\n      privacy: PrivacyType.PUBLIC,\n    };\n\n    const newRegister = await this.usersRepository.save(newUser);\n\n    return newRegister;\n  }\n\n  async findUserById(user_id: string) {\n    const user = await this.usersRepository.findOne({\n      where: { user_id },\n      select: [\n        'user_id',\n        'email',\n        'username',\n        'age',\n        'avatar',\n        'gender',\n        'address',\n        'description',\n        'createdAt',\n        'updatedAt',\n        'deletedAt',\n        'privacy',\n      ],\n    });\n\n    if (!user) return null;\n\n    if (!user.deletedAt) return user;\n    return null;\n  }\n\n  async deleteUser(user: IUser) {\n    const userDb = await this.findUserById(user.user_id);\n\n    if (userDb)\n      return this.usersRepository.update(\n        { user_id: user.user_id },\n        { deletedAt: new Date() },\n      );\n  }\n\n  async updateProfile(\n    dto: UpdateUserDto,\n    user: IUser,\n    file: Express.Multer.File,\n  ) {\n    if (!file) {\n      return await this.usersRepository.update(\n        { user_id: user.user_id },\n        {\n          ...dto,\n        },\n      );\n    } else {\n      const findUser = await this.findUserById(user.user_id);\n      const avatar = findUser.avatar;\n\n      if (avatar) {\n        try {\n          if (fs.existsSync(avatar)) {\n            fs.unlinkSync(avatar);\n          }\n        } catch (error) {\n          console.error('Error deleting old avatar:', error);\n        }\n      }\n      return await this.usersRepository.update(\n        { user_id: user.user_id },\n        {\n          ...dto,\n          avatar: file.path,\n        },\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/passpost/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/passpost/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/conversation-members/conversation-members.controller.ts\n            \n            controller\n            ConversationMembersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/conversation-members/conversation-members.service.ts\n            \n            injectable\n            ConversationMembersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/conversation-members/dto/conversation-member.dto.ts\n            \n            class\n            ConversationMemberDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/conversation-members/entities/conversation-member.entity.ts\n            \n            entity\n            ConversationMember\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/conversations/conversations.controller.ts\n            \n            controller\n            ConversationsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/conversations/conversations.service.ts\n            \n            injectable\n            ConversationsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/conversations/dto/create-conversation.dto.ts\n            \n            class\n            CreateConversationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/conversations/dto/delete-conversation.dto.ts\n            \n            class\n            DeleteConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateConversationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/conversations/entities/conversation.entity.ts\n            \n            entity\n            Conversation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/multer.config.ts\n            \n            injectable\n            MulterConfigService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/database/database.providers.ts\n            \n            variable\n            DatabaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/customize.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/customize.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/customize.ts\n            \n            variable\n            RESPONSE_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/customize.ts\n            \n            variable\n            ResponseMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/decorator/customize.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/group-members/dto/create-group-member.dto.ts\n            \n            class\n            CreateGroupMemberDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/group-members/dto/update-group-member.dto.ts\n            \n            class\n            UpdateGroupMemberDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/group-members/entities/group-member.entity.ts\n            \n            class\n            GroupMember\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/group-members/group-members.controller.ts\n            \n            controller\n            GroupMembersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/group-members/group-members.service.ts\n            \n            injectable\n            GroupMembersService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guard/guard-conversation-admin.ts\n            \n            guard\n            AdminConversationGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guard/guard-conversation-creator.ts\n            \n            guard\n            CreatorConversationGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guard/guard-conversation-member.ts\n            \n            guard\n            MemberConversationGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/guard/guard-relationship-friend.ts\n            \n            guard\n            FriendRelationshipGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messgages/dto/create-messgage.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/messgages/dto/update-messgage.dto.ts\n            \n            class\n            UpdateMessgageDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messgages/entities/messgage.entity.ts\n            \n            entity\n            Message\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/messgages/messgages.controller.ts\n            \n            controller\n            MessagesController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/messgages/messgages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/relationships/dto/create-relationship.dto.ts\n            \n            class\n            CreateRelationshipDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/relationships/dto/update-relationship.dto.ts\n            \n            class\n            UpdateRelationshipDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/relationships/entities/relationship.entity.ts\n            \n            entity\n            Relationship\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/relationships/relationships.controller.ts\n            \n            controller\n            RelationshipsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/relationships/relationships.service.ts\n            \n            injectable\n            RelationshipsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.interface.ts\n            \n            interface\n            IUser\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.7\n        \n            mysql2 : ^3.11.3\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.13.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GenderType   (src/.../helper.enum.ts)\n                        \n                        \n                            MediaType   (src/.../helper.enum.ts)\n                        \n                        \n                            MemberType   (src/.../helper.enum.ts)\n                        \n                        \n                            PostType   (src/.../helper.enum.ts)\n                        \n                        \n                            PrivacyType   (src/.../helper.enum.ts)\n                        \n                        \n                            ReactionPostType   (src/.../helper.enum.ts)\n                        \n                        \n                            ReactionType   (src/.../helper.enum.ts)\n                        \n                        \n                            RelationshipType   (src/.../helper.enum.ts)\n                        \n                        \n                            RoleType   (src/.../helper.enum.ts)\n                        \n                        \n                            StatusType   (src/.../helper.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/helper/helper.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        GenderType\n                    \n                \n                        \n                            \n                                 MALE\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 FEMALE\n                            \n                        \n                        \n                            \n                                Value : female\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        MediaType\n                    \n                \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : image\n                            \n                        \n                        \n                            \n                                 VIDEO\n                            \n                        \n                        \n                            \n                                Value : video\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        MemberType\n                    \n                \n                        \n                            \n                                 MEMBER\n                            \n                        \n                        \n                            \n                                Value : member\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 GROUP\n                            \n                        \n                        \n                            \n                                Value : group\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PrivacyType\n                    \n                \n                        \n                            \n                                 PUBLIC\n                            \n                        \n                        \n                            \n                                Value : public\n                            \n                        \n                        \n                            \n                                 PRIVATE\n                            \n                        \n                        \n                            \n                                Value : private\n                            \n                        \n                        \n                            \n                                 PROTECTED\n                            \n                        \n                        \n                            \n                                Value : protected\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ReactionPostType\n                    \n                \n                        \n                            \n                                 COMMENT\n                            \n                        \n                        \n                            \n                                Value : comment\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ReactionType\n                    \n                \n                        \n                            \n                                 LIKE\n                            \n                        \n                        \n                            \n                                Value : like\n                            \n                        \n                        \n                            \n                                 LOVE\n                            \n                        \n                        \n                            \n                                Value : love\n                            \n                        \n                        \n                            \n                                 HAHA\n                            \n                        \n                        \n                            \n                                Value : haha\n                            \n                        \n                        \n                            \n                                 WOW\n                            \n                        \n                        \n                            \n                                Value : wow\n                            \n                        \n                        \n                            \n                                 SAD\n                            \n                        \n                        \n                            \n                                Value : sad\n                            \n                        \n                        \n                            \n                                 ANGRY\n                            \n                        \n                        \n                            \n                                Value : angry\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RelationshipType\n                    \n                \n                        \n                            \n                                 FRIEND\n                            \n                        \n                        \n                            \n                                Value : friend\n                            \n                        \n                        \n                            \n                                 FOLLOW\n                            \n                        \n                        \n                            \n                                Value : follow\n                            \n                        \n                        \n                            \n                                 FOLLOWER\n                            \n                        \n                        \n                            \n                                Value : follower\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RoleType\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StatusType\n                    \n                \n                        \n                            \n                                 ON\n                            \n                        \n                        \n                            \n                                Value : on\n                            \n                        \n                        \n                            \n                                 OFF\n                            \n                        \n                        \n                            \n                                Value : off\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConversationMembersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConversationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GroupMembersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RelationshipsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConversationMembersModule\n\n\n\ncluster_ConversationMembersModule_exports\n\n\n\ncluster_ConversationMembersModule_providers\n\n\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_exports\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_GroupMembersModule\n\n\n\ncluster_GroupMembersModule_providers\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_RelationshipsModule\n\n\n\ncluster_RelationshipsModule_exports\n\n\n\ncluster_RelationshipsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nConversationMembersModule\n\nConversationMembersModule\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nConversationMembersModule->MessagesModule\n\n\n\nAppModule -->\n\nConversationMembersModule->AppModule\n\n\n\n\n\nConversationMembersService \n\nConversationMembersService \n\nConversationMembersService  -->\n\nConversationMembersModule->ConversationMembersService \n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nConversationsService \n\nConversationsService \n\nConversationsService  -->\n\nConversationsModule->ConversationsService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nConversationMembersModule -->\n\nDatabaseModule->ConversationMembersModule\n\n\n\nConversationsModule -->\n\nDatabaseModule->ConversationsModule\n\n\n\nMessagesModule -->\n\nDatabaseModule->MessagesModule\n\n\n\n\n\nRelationshipsModule\n\nRelationshipsModule\n\nRelationshipsModule -->\n\nDatabaseModule->RelationshipsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nDatabaseModule->UsersModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nDATA_SOURCE \n\nDATA_SOURCE \n\nDATA_SOURCE  -->\n\nDatabaseModule->DATA_SOURCE \n\n\n\n\n\nGroupMembersModule\n\nGroupMembersModule\n\nAppModule -->\n\nGroupMembersModule->AppModule\n\n\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\nConversationMembersModule -->\n\nRelationshipsModule->ConversationMembersModule\n\n\n\nConversationsModule -->\n\nRelationshipsModule->ConversationsModule\n\n\n\nAppModule -->\n\nRelationshipsModule->AppModule\n\n\n\n\n\nRelationshipsService \n\nRelationshipsService \n\nRelationshipsService  -->\n\nRelationshipsModule->RelationshipsService \n\n\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nRelationshipsModule -->\n\nUsersModule->RelationshipsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nConversationMembersService\n\nConversationMembersService\n\nConversationMembersModule -->\n\nConversationMembersService->ConversationMembersModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\nGroupMembersService\n\nGroupMembersService\n\nGroupMembersModule -->\n\nGroupMembersService->GroupMembersModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nRelationshipsService\n\nRelationshipsService\n\nRelationshipsModule -->\n\nRelationshipsService->RelationshipsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    14 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DatabaseProviders   (src/.../database.providers.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../customize.ts)\n                        \n                        \n                            Public   (src/.../customize.ts)\n                        \n                        \n                            RESPONSE_MESSAGE   (src/.../customize.ts)\n                        \n                        \n                            ResponseMessage   (src/.../customize.ts)\n                        \n                        \n                            User   (src/.../customize.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/database/database.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DatabaseProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Provider[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'DATA_SOURCE',\n    useFactory: async (configService: ConfigService) => {\n      const dataSource = new DataSource({\n        type: 'postgres',\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        synchronize: configService.get('POSTGRES_SYNC'),\n      });\n      return dataSource.initialize();\n    },\n    inject: [ConfigService],\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/decorator/customize.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESPONSE_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'response_message'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ResponseMessage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (message: string) =>\n  SetMetadata(RESPONSE_MESSAGE, message)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
